


Paper ID = 5865
Title = Efficient Exact Gradient Update for training Deep
Networks with Very Large Sparse Targets
Pascal Vincent∗, Alexandre de Brébisson, Xavier Bouthillier
Département d’Informatique et de Recherche Opérationnelle
Université de Montréal, Montréal, Québec, CANADA
∗ and CIFAR
Abstract
An important class of problems involves training deep neural networks with sparse
prediction targets of very high dimension D. These occur naturally in e.g. neural
language models or the learning of word-embeddings, often posed as predicting
the probability of next words among a vocabulary of size D (e.g. 200 000). Com-
puting the equally large, but typically non-sparse D-dimensional output vector
from a last hidden layer of reasonable dimension d (e.g. 500) incurs a prohibitive
O(Dd) computational cost for each example, as does updating the D × d output
weight matrix and computing the gradient needed for backpropagation to previous
layers. While efficient handling of large sparse network inputs is trivial, the case
of large sparse targets is not, and has thus so far been sidestepped with approxi-
mate alternatives such as hierarchical softmax or sampling-based approximations
during training. In this work we develop an original algorithmic approach which,
for a family of loss functions that includes squared error and spherical softmax,
can compute the exact loss, gradient update for the output weights, and gradi-
ent for backpropagation, all in O(d2) per example instead of O(Dd), remarkably
without ever computing theD-dimensional output. The proposed algorithm yields
a speedup of D4d , i.e. two orders of magnitude for typical sizes, for that critical part
of the computations that often dominates the training time in this kind of network
architecture.
1 Introduction
Many modern applications of neural networks have to deal with data represented, or representable,
as very large sparse vectors. Such representations arise in natural language related tasks, where
the dimension D of that vector is typically (a multiple of) the size of the vocabulary, and also in
the sparse user-item matrices of collaborative-filtering applications. It is trivial to handle very large
sparse inputs to a neural network in a computationally efficient manner: the forward propagation
and update to the input weight matrix after backpropagation are correspondingly sparse. By con-
trast, training with very large sparse prediction targets is problematic: even if the target is sparse, the
computation of the equally large network output and the corresponding gradient update to the huge
output weight matrix are not sparse and thus computationally prohibitive. This has been a practical
problem ever since Bengio et al. [1] first proposed using a neural network for learning a language
model, in which case the computed output vector represents the probability of the next word and
is the size of the considered vocabulary, which is becoming increasingly large in modern applica-
tions [2]. Several approaches have been proposed to attempt to address this difficulty essentially by
sidestepping it. They fall in two categories:
• Sampling or selection based approximations consider and compute only a tiny fraction of the
output’s dimensions sampled at random or heuristically chosen. The reconstruction sampling of
Dauphin et al. [3], the efficient use of biased importance sampling in Jean et al. [4], the use of
1
Noise Contrastive Estimation [5] in Mnih and Kavukcuoglu [6] and Mikolov et al. [7] all fall
under this category. As does the more recent use of approximate Maximum Inner Product Search
based on Locality Sensitive Hashing techniques[8, 9] to select a good candidate subset.
• Hierarchical softmax [10, 7] imposes a heuristically defined hierarchical tree structure for the
computation of the normalized probability of the target class.
Compared to the initial problem of considering all D output dimensions, both kinds of approaches
are crude approximations. In the present work, we will instead investigate a way to actually perform
the exact gradient update that corresponds to considering all D outputs, but do so implicitly, in a
computationally efficient manner, without actually computing the D outputs. This approach works
for a relatively restricted class of loss functions, the simplest of which is linear output with squared
error (a natural choice for sparse real-valued regression targets). The most common choice for
multiclass classification, the softmax loss is not part of that family, but we may use an alternative
spherical softmax, which will also yield normalized class probabilities. For simplicity and clarity,
our presentation will focus on squared error and on an online setting. We will briefly discuss its
extension to minibatches and to the class of possible loss functions in sections 3.5 and 3.6.
2 The problem
2.1 Problem definition and setup
We are concerned with gradient-descent based training of a deep feed-forward neural network with
target vectors of very high dimension D (e.g. D = 200 000) but that are sparse, i.e. a comparatively
small number, at most K  D, of the elements of the target vector are non-zero. Such a K-
sparse vector will typically be stored and represented compactly as 2K numbers corresponding
to pairs (index, value). A network to be trained with such targets will naturally have an equally
large output layer of dimension D. We can also optionally allow the input to the network to be a
similarly high dimensional sparse vector of dimension Din. Between the large sparse target, output,
and (optionally large sparse) input, we suppose the network’s intermediate hidden layers to be of
smaller, more typically manageable, dimension d D (e.g. d = 500)1.
Mathematical notation: Vectors are denoted using lower-case letters, e.g. h, and are considered
column-vectors; corresponding row vectors are denoted with a transpose, e.g. hT . Matrices are
denoted using upper-case letters, e.g. W , with WT the transpose of W . The ith column of W is
denoted Wi , and its ith row W:i (both viewed as a column vector). U−T =
(
U−1
)T
denotes the
transpose of the inverse of a square matrix. Id is the d× d identity matrix.
Network architecture: We consider a standard feed forward neural network architecture as de-
picted in Figure 1. An input vector x ∈ RDin is linearly transformed into a linear activation
a(1) = W (1)Tx + b(1) through a Din × d input weight matrix W (1) (and an optional bias vector
b(1) ∈ Rd). This is typically followed by a non-linear transformation s to yield the representation of
the first hidden layer h(1) = s(a(1)). This first hidden layer representation is then similarly trans-
formed through a number of subsequent non-linear layers (that can be of any usual kind amenable to
backpropagation) e.g. h(k) = s(a(k)) with a(k) = W (k)Th(k−1) + b(k) until we obtain last hidden
layer representation h = h(m). We then obtain the final D-dimensional network output as o = Wh
where W is a D × d output weight matrix, which will be our main focus in this work. Finally, the
network’sD-dimensional output o is compared to theD-dimensional target vector y associated with
input x using squared error, yielding loss L = ‖o− y‖2.
Training procedure: This architecture is a typical (possibly deep) multi-layer feed forward neural
network architecture with a linear output layer and squared error loss. Its parameters (weight matri-
ces and bias vectors) will be trained by gradient descent, using gradient backpropagation [11, 12, 13]
to efficiently compute the gradients. The procedure is shown in Figure 1. Given an example from
the training set as an (input,target) pair (x, y), a pass of forward propagation proceeds as out-
lined above, computing the hidden representation of each hidden layer in turn based on the pre-
vious one, and finally the network’s predicted output o and associated loss L. A pass of gradient
backpropagation then works in the opposite direction, starting from ∇o = ∂L∂o = 2(o − y) and
1Our approach does not impose any restriction on the architecture nor size of the hidden layers, as long as
they are amenable to usual gradient backpropagation.
2
Efficient Exact Gradient Update for Training Deep Networks with Very Large Sparse Targets
Pascal Vincent *          Alexandre de Brébisson        Xavier Bouthillier
Abstract
An important class of problems involves training deep neural networks with sparse prediction targets of very high dimension D. These occur 
naturally in e.g. neural language models or the learning of word-embeddings, often posed as predicting the probability of next words among 
a vocabulary of size D (e.g. 500 000). Computing the equally large, but typically non-sparse D-dimensional output vector from a last hidden 
layer of reasonable dimension d (e.g. 500) incurs a prohibitive O(Dd) computational cost for each example, as does updating the D ! d 
output weight matrix and computing the gradient needed for backpropagation to previous layers. While efficient handling of large sparse 
network inputs is trivial, this case of large sparse targets is not, and has thus so far been sidestepped with approximate alternatives such as 
hierarchical softmax or sampling-based approximations during training. In this work we develop an original algorithmic approach that, for a 
family of loss functions that includes squared error and spherical softmax, can compute the exact loss, gradient update for the output weights, 
and gradient for backpropagation, all in O(d2) per example instead of O(Dd), remarkably without ever computing the D-dimensional output. 
Training time is thus independent of output-layer size (or number of classes). Compared to naive backprop, the proposed algorithm is 
expected to yield an actual speedup of at least D/4d , i.e. two orders of magnitude for typical sizes, for that critical part of the computation 
that often dominates the training time in this kind of network architecture.
The Problem
‣ Training deep neural networks with very large sparse targets is an important problem
‣ Arises e.g. in Neural Language Models [1] with large vocabulary size (e.g. D = 500 000 one-hot target).
‣ Efficient handling of large sparse inputs is trivial.
‣ But backprop training with large sparse targets is prohibitively expensive.
‣ Focus on output layer: maps last hidden representation h of reasonable dimension d (e.g. 500)
to very large output o of dimension D (e.g. 500 000) with a Dxd parameter matrix W:
Experimental validation
Timing of output layer computations, for  CPU implementation on 2 GHz Intel Core i7. Minibatch size m =10.
Both naive backprop version and the proposed factorised parameter version learn the same actual W. 
Detailed algorithm, benefits and limitations
Accepted as a workshop contribution at ICLR 2015
3.5 PUTTING IT ALL TOGETHER: ALGORITHM FOR COMPUTING THE COST L, GRADIENT ON
h, AND UPDATING U AND V
Efficient computation of cost L, gradient with respect to h (to be later backpropagated further) as
well as updating U and V and performing the bookkeeping for U−T and Q. The following table
describes the algorithmic steps that we put together from the equations derived above.
Step
#
Operation Computational
complexity
Number of
multiply-adds
1: ĥ = Qh O(d2) d2
2: ŷ = UT (V T y) O(Kd + d2) Kd + d2
3: ẑ = ĥ− ŷ O(d) d
4: ∇h = 2ẑ O(d) d
5: L = hT ĥ− 2hT ŷ + yT y O(2d + K) 2d + K + 1
6: Unew = U − 2η(Uh)hT O(d2) 2d2 + d
7: U−Tnew =
U−T + 2η
1−2η￿h￿2 (U
−T h)hT
O(d2) 2d2 + 2d + 3
8: Vnew = V + 2ηy(U−Tnewh)
T O(d2 + Kd) d2 + K + Kd
9: Qnew =
Q− 2η
￿
hẑT + ẑhT
￿
+
(4η2L)hhT
O(d2) 4 + 2d + 3d2
4 DISCUSSION: EXPECTED BENEFITS, EXTENSIONS AND LIMITATIONS
Having K ￿ d ￿ D we see that the proposed algorithm requires O(d2) operations whereas the
standard approach required O(Dd) operations. If we take K ≈ d , we may state more precisely that
the proposed algorithm, for computing the loss and the gradient updates will requires roughly 12d2
operations whereas the standard approach required roughly 3Dd operations. So overall the proposed
algorithm change corresponds to a computational speedup by a factor of D4d . For D = 200 000 and
d = 500 the expected speedup is thus 100.
Note that the advantage is not only in computational complexity, but also in memory access. For
each example, the standard approach needs to access and cha ge ll D × d elements of matrix W ,
whereas the proposed approach only accesses the much smaller number K×d element of V as well
as the three d× d matrices U , U−T , and Q.
So overall we have a much faster algorithm, which while doing so implicitly, will however perform
the exact same gradient update as the standard approach. We want to emphasize here that what
we are doing is not at all the same as simply chaining 2 linear layers U and V and performing
ordinary gradient descent updates on these: this would result in the same prohibitive computational
complexity as the standard approach, and such ordinary separate gradient updates to Uand V would
not be equivalent to the ordinary gradient update to W = V U .
Our algorithm can be straightforwardly extended to the minibatch case, and is expected to yield the
same speedup factor compared to the standard approach. But one needs to be careful in order to keep
the computation of U−T h reasonably efficient. Indeed, depending on the size of the minibatch m, it
may be more efficient to resolve the correpsonding linear equation for each minibatch from scratch
rather than updating U−T with the Woodbury equation (which generalizes the Sheman-Morrison
formula for m > 1). This approach that we detailed for linear output and squared error can easily
be extended to slightly more exotic loss functions: basically any loss function that can be expressed
using only the oc associated to non-zero yc and ￿o￿2 =
￿
j o
2
j the squared norm of the whole output
vector, which we can compute cheaply. This family of loss functions does not include the standard
softmax, but includes the so-called spherical softmax: log o
2
c￿
j o
2
j
(where c is the correct class label).
It remains to be seen in practice how this approach performs computationally, and whether we lose
something due to using this more limited family of loss functions.
7
...
￿ ￿￿ ￿
...
￿ ￿￿ ￿
(large D, but K-sparse) (large D, but K-sparse) 
...
(small d)
...
large D, not sparse 
Loss
Input x Target y
Output o
last hidden h
L = ￿o− y￿2
hidden 2
(small d)
hidden 1
(small d)
O(Kd)  
O(d2)  
O(d2)  
O(Dd)  
Prohibitivley expensive!
Ex: D = 500 000, K=5
Ex: d = 500
O(D)  
O(d2)  
O(d2)  O(d
2)  
Forward propagation
Backpropagation
(dxd)W(2)
O(D)  
!o = 2(o-y)  
O(Dd)  
!h = W T !o  
O(Dd)  
W "W- ! !o hT  
O(Kd)  W(1) "W (1)- ! x !aT  
cheap!W(1)(Dxd)
Altogether: O( Dd ) 3
Problem: expensive computation
we suppose K << d << D 
o = Wh
* and CIFAR
Proposed approach
We can do much better than O( Dd ). We can compute
! loss L
! gradient w.r.t. last hidden layer !h 
! exact same gradient update to W
all in O(d2) without ever computing full output o=Wh !
First trick: L and !h can be computed efficiently if we keep an up-to-date d x d matrix Q = WTW 
Second trick: represent W implicitly as factorization and update U and V instead
5.1 Computing the squared error loss efficiently
Suppose we have, for a network input example x, computed last hidden repre-
sentation h ∈ Rd through forward propagation. The network’s D dimensional
output o = Wh is then in principle compared to high dimensional target y ∈ RD.
The corresponding squared error loss is L = ￿Wh− y￿2. As we have seen in
Section 3.3, computing it in the direct naive way would have a prohibitive com-
putational complexity of O(Dd + D) = O(Dd) because computing output Wh
with a full D×d matrix W and a typically non-sparse h is O(Dd). Note however
that we can rewrite this as:
L = ￿Wh− y￿2
= (Wh− y)T (Wh− y)
= hT WT Wh− yT Wh− hT WT y + yT y
= hT Qh− 2hT (WT y) + yT y
= hT Qh− 2hT UT V T y + yT y
= hT (Qh)− 2hT (UT (V T y)) + yT y
= hT ( Qh￿￿￿￿
ĥ
−2(UT (V T y)￿ ￿￿ ￿
ŷ
) + yT y
SHORT IDEA FORMULATION FOR SLIDES:
L = ￿
O(Dd)￿￿￿￿
Wh −y￿2
= (Wh− y)T (Wh− y)
= hT WT Wh− 2hT (WT y) + yT y
= hT ( Qh￿￿￿￿
O(d2)
−2(WT y)￿ ￿￿ ￿
O(Kd)
) + yT y￿￿￿￿
O(K)
with Q = WT W
Supposing we have maintained an up-to-date Q = WT W , which is a compact
d×d matrix (we will see how we update Q cheaply in section ??????), computing
ĥ = Qh has a complexity of O(d2). Thanks to the K−sparsity and sparse
representation of y, computing V T y is O(Kd) and results in a d−dimensional
vector, so that computing ŷ = UT (V T y) is O(Kd + d2) . The last term is
O(K). So the overall computational complexity for computing L in this way is
O(Kd+d2) = O((K +d)d). With K ￿ D and d ￿ D this can be several orders
of magnitude cheaper than the prohibitive O(Dd) of the direct approach.
If we define intermediate vectors ĥ = Qh and ŷ = WT y = UT (V T y) the
computation of L can be rewritten a little more compactly as
L = hT (ĥ− 2ŷ) + ￿y￿2
5
this is O(Kd +d2 +K) = O(d2)
Computing loss L
5.2 Computing the gradient on h efficiently
To backpropagate the gradient through the network, we need to compute the
gradient of loss L with respect to last hidden layer representation h. This is
∇h = ∂L∂h =
∂￿Wh−y￿2
∂h = 2W
T (Wh − y). Again, if we were to compute it
directly in this manner the computational complexity would be a prohibitive
O(Dd). But we can instea rewrite it as
∇h =
∂L
∂h
=
∂ ￿Wh− y￿2
∂h
= 2WT (Wh− y)
= 2
￿
WT Wh−WT y
￿
= 2
￿
Qh− UT V T y
￿
= 2
￿
Qh− UT (V T y)
￿
= 2(ĥ− ŷ)
Again, supposing we have maintained an up-to-date Q (we will see how we
update Q cheaply in section ?????) computing ∂L∂h this way is O(Kd + d
2) =
O((K + d)d), much ch a er than the O(Dd) of the direct approach.
HORT IDEA FORMULATION FOR SLIDES:
∇h =
∂L
∂h
=
∂￿Wh− y￿2
∂h
= 2WT (Wh− y)
= 2( Qh￿￿￿￿
O(d2)
−WT y￿ ￿￿ ￿
O(Kd)
)
5.3 Efficient gradient update of W
The gradient of the squared error loss with respect to output layer weight matrix
W is ∂L∂W =
∂￿Wh−y￿2
∂W = 2(Wh−y)hT . And the corresponding gradient descent
update to W would be Wnew ← W − 2η(Wh − y)hT where η is a positive
learning rate. Again, computed in this manner, this induces a prohibitive O(Dd)
computational complexity, both to compute output and residue Wh − y, and
then to update all the Dd elements of W (since generally neither Wh− y nor h
will be sparse). To overcome this difficulty let us first rewrite the update as
Wnew = W − 2η(Wh− y)hT
= W − 2ηWhhT + 2ηyhT
Note that we can decompose this update into two consecutive update steps:
6
this is O(Kd +d2) = O(d2)
Provided w  maintain an up-to-date Q = WTW (achievable cheaply) 
Computing gradient !h  w.r.t. last hidden layer
W￿￿￿￿
D×d
= V￿￿￿￿
D×d
U￿￿￿￿
d×d
5.2 Computing the gradient n h efficiently
To backpropagate the gradient through the network, we need to comput the
gradient of loss L with respect to last hidden layer representation h. This is
∇h = ∂L∂h =
∂￿Wh−y￿2
∂h = 2W
T (Wh − y). Again, if we were to compute it
directly in this manner the computational complexity would be a prohibitive
O(Dd). But we can instead rewrite it as
∇h =
∂L
∂h
=
∂ ￿Wh− y￿2
∂h
= 2WT (Wh− y)
= 2
￿
WT Wh−WT y
￿
= 2
￿
Qh− UT V T y
￿
= 2
￿
Qh− UT (V T y)
￿
= 2(ĥ− ŷ)
Again, supposing we have maintained an up-to-date Q we will see how we
update Q cheaply in section ?????) computing ∂L∂h this way is O(Kd + d
2) =
O((K + d)d), much cheaper than the O(Dd) of the direct approach.
SHORT IDEA FORMULATION FOR SLIDES:
∇h =
∂L
∂h
=
∂￿Wh− y￿2
∂h
= 2WT (Wh− y)
= 2( Qh￿￿￿￿
O(d2)
−WT y￿ ￿￿ ￿
O(Kd)
)
5.3 Efficient gradient update of W
The gradient of the squared error loss with respect to output layer weight matrix
W is ∂L∂W =
∂￿Wh−y￿2
∂W = 2(Wh−y)hT . And the corresponding gradient descent
update to W would be Wnew ← W − 2η(Wh − y)hT where η is a positive
learning rate. Again, computed in this manner, this induces a prohibitive O(Dd)
computational complexity, both to compute output and residue Wh − y, and
then to update all the Dd elements of W (since generally neither Wh− y nor h
will be sparse). To overcome this difficulty let us first rewrite the update as
Wnew = W − 2η(Wh− y)hT
= W − 2ηWhhT + 2ηyhT
Note that we can decompose this update into two consecutive update steps:
6
Naive gadient update is a rank-one update to W 
(all Dd elements of W modified!)
Equivalently decomposed 
in 2 sequential steps: O( Dd )  
a) W ←W − 2ηWhhT
b) W ←W + 2ηyhT
We will now see how we can perform each of these updates implicitly by updating
only U and V respectively, as well as how we maintain correspondingly up-to-
date versio s of Q = V T V (needed to effic ently compute cost L and gradient on
h in Equations ???? and ???? above) and U−T = (U−1)T (that will be needed
for update b) ).
Solution:
a) Unew = U − 2η(Uh)hT
b) Vnew = V + 2ηy(U−Tnewh)T
Proof:
VnewUnew = (V + 2ηy(U
−T
newh)
T ) Unew
= V Unew + 2ηy(U
−T
newh)
T Unew
= V Unew + 2ηyh
T U−1newUnew
= V (U − 2η(Uh)hT ) + 2ηyhT (U−1newUnew)
= V U − 2ηV UhhT + 2ηyhT
= V U − 2η(V Uh− y)hT
= W − 2η(Wh− y)T hT
= Wnew
a) First update of the form W ← W − 2ηWhhT This can be achieved
implicitly by updating only U as follows:
Unew = U − 2η(Uh)hT
Proof:
Wnew = V Unew = V (U − 2η(Uh)hT )
= V U − 2ηV UhhT
= W − 2ηWhhT
Changing U doesn’t change Q = V T V . But we will need an up-to-date U−T
in the second update b).
Provided we already have U−T this can be achieved cheaply by using the
Sherman-Morisson formula for the rank-one update to the inverse of U :
(U + uvT )−1 = U−1 − 1
1 + vT U−1u
U−1uvT U−1
7
a) W ←W − 2ηWhhT
b) W ←W + 2ηyhT
We will now see how we can perform each of these updates implicitly by updating
only U and V respectively, as well as how we maintain correspondingly up-to-
date versions of Q = V T V (needed to efficiently compute cost L and gradient on
h in Equations ???? and ???? above) and U−T = (U−1)T (that will be needed
for update b) ).
Solution:
a) Unew = U − 2η(Uh)hT
b) Vnew = V + 2ηy(U−Tnewh)T
Proof:
VnewUnew = (V + 2ηy(U
−T
newh)
T ) Unew
= V Unew + 2ηy(U
−T
newh)
T Unew
= V Unew + 2ηyh
T U−1newUnew
= V (U − 2η(Uh)hT ) + 2ηyhT (U−1newUnew)
= V U − 2ηV UhhT + 2ηyhT
= V U − 2η(V Uh− y)hT
= W − 2η(Wh− y)T hT
= Wnew
a) First update of the form W ← W − 2ηWhhT This can be achieved
implicitly by updating only U as follows:
Unew = U − 2η(Uh)hT
Proof:
Wnew = V Unew = V (U − 2η(Uh)hT )
= V U − 2ηV UhhT
= W − 2ηWhhT
Changing U doesn’t change Q = V T V . But we will need an up-to-date U−T
in the second update b).
Provided we already have U−T this can be achieved cheaply by using the
Sherman-Morisson formula for the rank-one update to the inverse of U :
(U + uvT )−1 = U−1 − 1
1 + vT U−1u
U−1uvT U−1
7
That can be performed 
implic ty through U and V:
rank-1 update to U: O(d2)
O(Kd) O(d2) provided we updated U-1 cheaply
using Sherman-Morrison
Sparse update: only K rows of 
V instead of all D rows of W !
O( Dd )  
Proof:
Accepted as a workshop contribution at ICLR 2015
a) W ← W − 2ηWhhT
b) W ← W + 2ηyhT
Notice that we can perform each of these updates implicitly by updating only U and V respectively.:
a) Unew = U − 2η(Uh)hT (4)
b) Vnew = V + 2ηy(U
−T
newh)
T (5)
This results in implicitly updating W as we did explicitly in the naive approach of Eq. 3.
Proof:
VnewUnew = (V + 2ηy(U
−T
newh)
T ) Unew
= V Unew + 2ηy(U
−T
newh)
T Unew
= V Unew + 2ηyh
T U−1newUnew
= V (U − 2η(Uh)hT ) + 2ηyhT ( −1newUnew)
= V U − 2ηV UhhT + 2ηyhT
= V U − 2η(V Uh− y)hT
= W − 2η(Wh− y)T hT
= Wnew
We see that the update of U in Eq. 4 is a simple O(d2) operation. Following this simple rank-one
update to U , we can use the Sherman-Morrison formula to derive the corresponding rank-one update
to U−T which will also be O(d2):
U−Tnew = U
−T +
2η
1− 2η ￿h￿2
(U−T h)hT (6)
It is then easy to compute the U−Tnewh, an O(d
2) operation needed in Eq. 5, and the ensuing rank-one
update of V , thanks to the K-sparsity of y is only O(Kd).
Thanks to the K−sparsity and sparse representation of y, computing ŷ = V T y is O(Kd) and
￿t￿2 is O(K). Computation of ĥ = U−T h is O(d2). Given these, the update of Q is O(d2) and
the rank-one update of V , thanks to the K-sparsity of y is O(Kd). So these operations together
have computational complexity of O(Kd + d2) = O((K + d)d), which is much cheaper than the
prohibitive O(Dd) of the direct approach.
3.4 BOOKKEEPING: KEEPING AN UP-TO-DATE Q AND U−T
We have already seen, in Eq. 6, how we can cheaply maintain an up-to-date U−T following our
update of U .
Similarly, following our updates to U and V , we need to keep an up-to-date Q = WT W which is
needed to efficiently compute the loss L (Eq. 1) and gradient ∇h (Eq. 2).
The updates to and V in Equations 4 and 5 are equivalent to implicitly updating W as in Eq. 3,
and this translates into the following update to Q = WT W :
ẑ = Qh− UT (V T y)
Qnew = Q− 2η
￿
hẑT + ẑhT
￿
+ (4η2L)hhT (7)
Proof is straightforward but not provided here due to space constraints.
6
Bookkeeping operations as we update U and V:
! Using factored representation of W=VU does not change the 
complexity of the computation of L and  !h .
! Need to maintain an up-to-date U-1 following rank-1 update to U.  
" achieved in O(d2) through Sherman-Morrison formula. 
! Need to maintain an up-to-date Q = WTW following updates to U and V. 
" achieved in O(d2) as follows:
a) W ←W − 2ηWhhT
b) W ←W + 2ηyhT
We will now see how we can perform each of these updates implicitly by updating
only U and V respectively, as well as how we maintain correspondingly up-to-
date versions of Q = V T V (needed to efficiently compute cost L and gradient on
h in Equations ???? and ???? above) and U−T = (U−1)T (that will be needed
for update b) ).
Solution:
a) Unew = U − 2η(Uh)hT
b) Vnew = V + 2ηy(U−Tnewh)T
Proof:
VnewUnew = (V + 2ηy(U
−T
newh)
T ) Unew
= V Unew + 2ηy(U
−T
newh)
T Unew
= V Unew + 2ηyh
T U−1newUnew
= V (U − 2η(Uh)hT ) + 2ηyhT (U−1newUnew)
= V U − 2ηV UhhT + 2ηyhT
= V U − 2η(V Uh− y)hT
= W − 2η(Wh− y)T hT
= Wnew
SHORT FORMULATION FOR SLIDES OF UPDATE OF Q IN ON-
LINE CASE:
ẑ = Qh− UT (V T y)
Qnew = Q− 2η
￿
hẑT + ẑhT
￿
+ (4η2L)hhT
a) First update of the form W ← W − 2ηWhhT This can be achieved
implicitly by updating only U as follows:
Unew = U − 2η(Uh)hT
Proof:
Wnew = V Unew = V (U − 2η(Uh)hT )
= V U − 2ηV UhhT
= W − 2ηWhhT
7
Note: this is NOT th  same as a ordinary backprop 
update on two consecutive layers U and V which 
would still be O( Dd ).
Altogether:
 O( d2 )  
we suppose K << d << D 
we suppose K << d << D 
Current workarounds are approximations:
‣ Sampling based approximations compute only a tiny fraction of the output’s dimensions sampled at random. 
Reconstruction sampling [2] and the use of Noise Contrastive Estimation [3] in [4, 5] fall under this category.
‣ Hierarchical softmax [6, 4] imposes a heuristically defined hierarchical tree structure for the computation of the 
normalized probability of the target class.
[1] Bengio, Y., Ducharme, R., and Vincent, P. (2001). A neural probabilistic language model. NIPS 2000.
[2] Dauphin, Y., Glorot, X., and Bengio, Y. (2011). Large-scale learning of embeddings with reconstruction sampling. ICML 2011.
[5] Mnih, A. and Kavukcuoglu, K. (2013). Learning word embeddings efficiently with noise-contrastive estimation. NIPS 2013.
[6] Morin, F. and Bengio, Y. (2005). Hierarchical probabilistic neural network language model. AISTATS 2005.
[3] Gutmann, M. and Hyvarinen, A. (2010). Noise-contrastive estimation: A new estimation principle for unnormalized statistical models. AISTATS 2010.
[4] Mikolov, T., Chen, K., Corrado, G., and Dean, J. (2013). Efficient estimation of word representations in vector space. ICLR 2013 workshop track.
we suppose K << d << D Full algorithm (online version):
! Computation:  O(12 d2) v.s. O(3 Dd)
     " speedup of D/4d 
       for typical sizes: between 50 and 300
! Memory access: for each example access 
only Kd elements of  V and d2 elements of  
U, U-1 and Q v.s. Dd elements of  W.
Anticipated benefits:
! Approach limited to loss functions 
expressible using ||o||2 and the oc 
associated to non-zero yc only:
✓ linear output + squared error
# not regular log softmax
✓ linear+spherical softmax: 
! Step 6 can lead over time to 
ill conditioning " must periodically apply 
numerical stabilization strategy.
Limitations
Extension for minibatch of size m:
! Straightforward except for step 7:
! Update of U-T no longer with simple Sherman-Morrison. 
! Several possibilities: Woodbury identity (must invert m x m matrix), or iterated 
Sherman-Morrison, or solving UTx = h each time. Best choice will depends on m.
! " complexity remains O(d2) per example.
Accepted as a workshop contribution at ICLR 2015
3.5 PUTTING IT ALL TOGETHER: ALGORITHM FOR COMPUTING THE COST L, GRADIENT ON
h, AND UPDATING U AND V
Efficient computation of cost L, gradient with respect to h (to be later backpropagated further) as
well as updating U and V and performing the bookkeeping for U−T and Q. The following table
describes the algorithmic steps that we put together from the equations derived above.
Step
#
Operation Computational
complexity
Number of
multiply-adds
1: ĥ = Qh O(d2) d2
2: ŷ = UT (V T y) O(Kd + d2) Kd + d2
3: ẑ = ĥ− ŷ O(d) d
4: ∇h = 2ẑ O(d) d
5: L = hT ĥ− 2hT ŷ + yT y O(2d + K) 2d + K + 1
6: Unew = U − 2η(Uh)hT O(d2) 2d2 + d
7: U−Tnew =
U−T + 2η
1−2η￿h￿2 (U
−T h)hT
O(d2) 2d2 + 2d + 3
8: Vnew = V + 2ηy(U−Tnewh)
T O(d2 + Kd) d2 + K + Kd
9: Qnew =
Q− 2η
￿
hẑT + ẑhT
￿
+
(4η2L)hhT
O(d2) 4 + 2d + 3d2
4 DISCUSSION: EXPECTED BENEFITS, EXTENSIONS AND LIMITATIONS
Having K ￿ d ￿ D we see that the proposed algorithm requires O(d2) operations whereas the
standard approach required O(Dd) operations. If we take K ≈ d , we may state more precisely that
the proposed algorithm, for computing the loss and the gradient updates will requires roughly 12d2
operations whereas the standard approach required roughly 3Dd operations. So overall the proposed
algorithm change corresponds to a computational speedup by a factor of D4d . For D = 200 000 and
d = 500 the ex ected speedup is thus 100.
Note that the advantage is not only in computational complexity, but also in memory access. For
each example, the standard approach needs to access and change all D × d elements of matrix W ,
whereas the proposed approach only accesses the much smaller number K×d element of V as well
as the three d× d matrices U , U−T , and Q.
So overall we have a much faster algorithm, which while doing so implicitly, will however perform
the exact same gradient update as the standard approach. We want to emphasize here that what
we are doing is not at all the same as simply chaining 2 linear layers U and V and performing
or inary gradient descent updates on these: this would result in the same prohibitive computational
complexity as the standard approach, and such ordinary separate gradient updates to Uand V would
not be equivalent to the ordinary gradient update to W = V U .
Our algorithm can be straightforwardly extended to the minibatch case, and is expected to yield the
same speedup factor compared to the standard approach. But one needs to be careful in order to keep
the computation of U−T h reasonably efficient. Indeed, depending on the size of the minibatch m, it
may be more efficient to resolve the correpsonding linear equation for each minibatch from scratch
rather than updating U−T with the Woodbury equation (which generalizes the Sheman-Morrison
formula for m > 1). This approach that we detailed for linear output and squared error can easily
be extended to slightly more exotic loss functions: basically any loss function that can be expressed
using only the oc associated to non-zero yc and ￿o￿2 =
￿
j o
2
j the squared norm of the whole output
vector, which we can compute cheaply. This family of loss functions does not include the standard
softmax, but includes the so-called spherical softmax: log o
2
c￿
j o
2
j
(where c is the correct class label).
It remains to be seen in practice how this approach performs computationally, and whether we lose
something due to using this more limited family of loss functions.
7
Prohibitive!
Time taken by naive backprop (dotted lines) and the 
proposed factorised parameter version (full lines).
Speedup of factorised parameter version v.s. naive 
backprop (theoretical and experimentally measured).
Conclusion and future work
‣ We developed an original algorithm that yields a huge speedup for performing a full exact gradient update in networks with very large 
sparse targets: remarkably time is independent of output size (number of classes).
‣ Gain is from a fundamental algorithmic computational complexity improvement, not from low-level hardware-specific tricks or tuning.  
‣ Future: GPU implementation; spherical softmax cost; compare quality of word embeddings learned with these costs to standard softmax.  
References:
Figure 1: The computational problem posed by very large sparse targets. Dealing with sparse in-
put efficiently is trivial, with both the forward and backward propagation phases easily achieved in
O(Kd). However this is not the case with large sparse targets. They incur a prohibitive compu-
tational cost of O(Dd) at the output layer as forward propagation, gradient backpropagation and
weight update each require accessing all D × d elements of the large output weight matrix.
propagating back the gradients ∇h(k) = ∂L∂h(k) and ∇a(k) =
∂L
∂a(k)
upstream throug the network.
The corresponding gradient contributions on parameters (weights and biases), collected along the
way, are straightforward once we have the associated ∇a(k) . Specifically they are ∇b(k) = ∇a(k)
and ∇W (k) = h(k−1)(∇a(k))T . Similarly for the input layer ∇W (1) = x(∇a(1))T , and for the
output layer ∇W = (o − y)hT . Parameters are then updated through a gradient descent step
W (k) ← W (k) − η∇W (k) and b(k) ← b(k) − η∇b(k) , where η is a positive learning-rate. Similarly
for the output layer which will be our main focus here: W ←W − η∇W .
2.2 The easy part: input layer forward propagation and weight update
It is easy and straightforward to efficiently compute the forward propagation, and the backpropa-
gation and weight update part for the input layer when we have a very large Din-dimensional but
K−sparse input vector x with appropriate sparse representation. Specifically we suppose that x is
represented as a pair of vectors u, v of length (at most) K, where u contains integer indexes and v
the associated real values of the elements of x such that xi = 0 if i /∈ u, and xuk = vk.
• Forward propagation through the input layer: The sparse representation of x as the positions
of K elements together with their value makes it cheap to compute W (1)Tx. Even though W (1)
may be a huge full Din × d matrix, only K of its rows (those corresponding to the non-zero
entries of x) need to be visited and summed to computeW (1)Tx. Precisely, with our (u, v) sparse
representation of x this operation can be written as W (1)Tx =
∑K
k=1 vkW
(1)
:uk where each W
(1)
:uk
is a d-dimensional vector, making this an O(Kd) operation rather than O(Dd).
• Gradient and update through input layer: Let us for now suppose that we were able to get
gradients (through backpropagation) up to the first hidden layer activations a(1) ∈ Rd in the form
of gradient vector∇a(1) = ∂L∂a(1) . The corresponding gradient-based update to input layer weights
W (1) is simply W (1) ←W (1) − ηx(∇a(1))T . This is a rank-one update to W (1). Here again, we
see that only the K rows of W (1) associated to the (at most) K non-zero entries of x need to be
modified. Precisely this operation can be written as: W (1):uk ←W (1):uk−ηvk∇a(1) ∀k ∈ {1, . . . ,K}
making this again a O(Kd) operation rather than O(Dd).
3
2.3 The hard part: output layer propagation and weight update
Given some network input x, we suppose we can compute without difficulty through forward prop-
agation the associated last hidden layer representation h ∈ Rd. From then on:
• Computing the final output o = Wh incurs a prohibitive computational cost of O(Dd) since W
is a full D × d matrix. Note that there is a-priori no reason for representation h to be sparse (e.g.
with a sigmoid non-linearity) but even if it was, this would not fundamentally change the problem
since it is D that is extremely large, and we supposed d reasonably sized already. Computing the
residual (o− y) and associated squared error loss ‖o− y‖2 incurs an additional O(D) cost.
• The gradient on h that we need to backpropagate to lower layers is ∇h = ∂L∂h = 2WT (o − y)
which is another O(Dd) matrix-vector product.
• Finally, when performing the corresponding output weight update W ←W − η(o− y)hT we see
that it is a rank-one update that updates allD×d elements ofW , which again incurs a prohibitive
O(Dd) computational cost.
For very large D, all these three O(Dd) operations are prohibitive, and the fact that y is sparse, seen
from this perspective, doesn’t help, since neither o nor o− y will be sparse.
3 A computationally efficient algorithm for performing the exact online
gradient update
Previously proposed workarounds are approximate or use stochastic sampling. We propose a differ-
ent approach that results in the exact same, yet efficient gradient update, remarkably without ever
having to compute large output o.
3.1 Computing the squared error loss L and the gradient with respect to h efficiently
Suppose that, we have, for a network input example x, computed the last hidden representation
h ∈ Rd through forward propagation. The network’s D dimensional output o = Wh is then in
principle compared to the high dimensional target y ∈ RD. The corresponding squared error loss
is L = ‖Wh− y‖2. As we saw in Section 2.3, computing it in the direct naive way would have
a prohibitive computational complexity of O(Dd + D) = O(Dd) because computing output Wh
with a full D × d matrix W and a typically non-sparse h is O(Dd). Similarly, to backpropagate
the gradient through the network, we need to compute the gradient of loss L with respect to last
hidden layer representation h. This is ∇h = ∂L∂h =
∂‖Wh−y‖2
∂h = 2W
T (Wh − y). So again, if
we were to compute it directly in this manner, the computational complexity would be a prohibitive
O(Dd). Provided we have maintained an up-to-date matrix Q =WTW , which is of reasonable
size d × d and can be cheaply maintained as we will see in Section 3.3, we can rewrite these two
operations so as to perform them in O(d2):
Loss computation: Gradient on h:
L = ‖
O(Dd)︷︸︸︷
Wh −y‖2
= (Wh− y)T (Wh− y)
= hTWTWh− yTWh− hTWT y + yT y
= hTQh− 2hT (WT y) + yT y
= hT ( Qh︸︷︷︸
O(d2)
−2WT y︸ ︷︷ ︸
O(Kd)
) + yT y︸︷︷︸
O(K)
(1)
∇h =
∂L
∂h
=
∂‖Wh− y‖2
∂h
= 2WT (Wh− y)
= 2
(
WTWh−WT y
)
= 2( Qh︸︷︷︸
O(d2)
−WT y︸ ︷︷ ︸
O(Kd)
) (2)
The terms in O(Kd) and O(K) are due to leveraging the K-sparse representation of target vector
y. With K  D and d D, we get altogether a computational cost of O(d2) which can be several
orders of magnitude cheaper than the prohibitive O(Dd) of the direct approach.
4
3.2 Efficient gradient update of W
The gradient of the squared error loss with respect to output layer weight matrix W is ∂L∂W =
∂‖Wh−y‖2
∂W = 2(Wh − y)hT . And the corresponding gradient descent update to W would be
Wnew ←W −2η(Wh−y)hT , where η is a positive learning rate. Again, computed in this manner,
this induces a prohibitive O(Dd) computational complexity, both to compute output and residual
Wh − y, and then to update all the Dd elements of W (since generally neither Wh − y nor h will
be sparse). All D×d elements of W must be accessed during this update. On the surface this seems
hopeless. But we will now see how we can achieve the exact same update on W in O(d2). The trick
is to represent W implicitly as the factorization W︸︷︷︸
D×d
= V︸︷︷︸
D×d
U︸︷︷︸
d×d
and update U and V instead
a) Unew = U − 2η(Uh)hT (3)
b) Vnew = V + 2ηy(U
−T
newh)
T (4)
This results in implicitly updating W as we did explicitly in the naive approach as we now prove:
VnewUnew = (V + 2ηy(U
−T
newh)
T )Unew
= V Unew + 2ηy(U
−T
newh)
TUnew
= V Unew + 2ηyh
TU−1newUnew
= V (U − 2η(Uh)hT ) + 2ηyhT (U−1newUnew)
= V U − 2ηV UhhT + 2ηyhT
= V U − 2η(V Uh− y)hT
= W − 2η(Wh− y)ThT
= Wnew
We see that the update of U in Eq. 3 is a simple O(d2) operation. Following this simple rank-one
update to U , we can use the Sherman-Morrison formula to derive the corresponding rank-one update
to U−T which will also be O(d2):
U−Tnew = U
−T +
2η
1− 2η ‖h‖2
(U−Th)hT (5)
It is then easy to compute the U−Tnewh, an O(d
2) operation needed in Eq. 4. The ensuing rank-one
update of V in Eq 4, thanks to the K-sparsity of y is only O(Kd): only the K rows V associated
to non-zero elements in y are accessed and updated, instead of all D rows of W we had to modify
in the naive update! Note that with the factored representation of W as V U , we only have W
implicitly, so the WT y terms that entered in the computation of L and∇h in the previous paragraph
need to be adapted slightly as ŷ = WT y = UT (V T y), which becomes O(d2 + Kd) rather than
O(Kd) in computational complexity. But this doesn’t change the overall O(d2) complexity of these
computations.
3.3 Bookkeeping: keeping an up-to-date Q and U−T
We have already seen, in Eq. 5, how we can cheaply maintain an up-to-date U−T following our
update of U . Similarly, following our updates to U and V , we need to keep an up-to-date Q =
WTW which is needed to efficiently compute the loss L (Eq. 1) and gradient ∇h (Eq. 2). We have
shown that updates to U and V in equations 3 and 4 are equivalent to implicitly updating W as
Wnew ←W − 2η(Wh− y)hT , and this translates into the following update to Q =WTW :
ẑ = Qh− UT (V T y)
Qnew = Q− 2η
(
hẑT + ẑhT
)
+ (4η2L)hhT (6)
The proof is straightforward but due to space constraints we put it in supplementary material. One
can see that this last bookkeeping operation also has a O(d2) computational complexity.
5
3.4 Putting it all together: detailed algorithm and expected benefits
We have seen that we can efficiently compute cost L, gradient with respect to h (to be later back-
propagated further) as well as updating U and V and performing the bookkeeping for U−T and
Q. Algorithm 1 describes the detailed algorithmic steps that we put together from the equations
derived above. Having K  d D we see that the proposed algorithm requires O(d2) operations,
whereas the standard approach required O(Dd) operations. If we take K ≈ d , we may state more
precisely that the proposed algorithm, for computing the loss and the gradient updates will require
roughly 12d2 operations whereas the standard approach required roughly 3Dd operations. So over-
all the proposed algorithm change corresponds to a computational speedup by a factor of D4d . For
D = 200 000 and d = 500 the expected speedup is thus 100. Note that the advantage is not only
in computational complexity, but also in memory access. For each example, the standard approach
needs to access and change all D × d elements of matrix W , whereas the proposed approach only
accesses the much smaller number K×d elements of V as well as the three d×dmatrices U , U−T ,
and Q. So overall we have a substantially faster algorithm, which, while doing so implicitly, will
nevertheless perform the exact same gradient update as the standard approach. We want to empha-
size here that our approach is completely different from simply chaining 2 linear layers U and V
and performing ordinary gradient descent updates on them: this would result in the same prohibitive
computational complexity as the standard approach, and such ordinary separate gradient updates to
U and V would not be equivalent to the ordinary gradient update to W = V U .
Algorithm 1 Efficient computation of cost L, gradient on h, and update to parameters U and V
Step
#
Operation Computational
complexity
Number of
multiply-adds
1: ĥ = Qh O(d2) d2
2: ŷ = UT (V T y) O(Kd+ d2) Kd+ d2
3: ẑ = ĥ− ŷ O(d) d
4: ∇h = 2ẑ O(d) d
5: L = hT ĥ− 2hT ŷ + yT y O(2d+K) 2d+K + 1
6: Unew = U − 2η(Uh)hT O(d2) 2d2 + d
7: U−Tnew =
U−T + 2η
1−2η‖h‖2 (U
−Th)hT
O(d2) 2d2 + 2d+ 3
8: Vnew = V + 2ηy(U−Tnewh)
T O(d2 +Kd) d2 +K +Kd
9: Qnew =
Q− 2η
(
hẑT + ẑhT
)
+
(4η2L)hhT
O(d2) 4 + 2d+ 3d2
Altogether: O(d2)
provided
K < d D
≈ 12d2
elementary
operations
3.5 Controlling numerical stability and extension to the minibatch case
The update of U in Equation 3 may over time lead U to become ill-conditioned. To prevent this,
we regularly (every 100 updates) monitor its conditioning number. If either the smallest or largest
singular value moves outside an acceptable range2, we bring it back to 1 by doing an appropriate
rank-1 update to V (which costs Dd operations, but is only done rarely). Our algorithm can also
be straightforwardly extended to the minibatch case (the derivations are given in the supplemen-
tary material section) and yields the same theoretical speedup factor with respect to the standard
naive approach. But one needs to be careful in order to keep the computation of U−Th reasonably
efficient: depending on the size of the minibatchm, it may be more efficient to solve the correspond-
ing linear equation for each minibatch from scratch rather than updating U−Twith the Woodbury
equation (which generalizes the Sherman-Morrison formula for m > 1).
2More details on our numerical stabilization procedure can be found in the supplementary material
6
3.6 Generalization to a broader class of loss functions
The approach that we just detailed for linear output and squared error can be extended to a broader,
though restricted, family of loss functions. We call it the spherical family of loss functions because
it includes the spherical alternative to the softmax, thus named in [14]. Basically it contains any loss
function that can be expressed as a function of only the oc associated to non-zero yc and of ‖o‖2 =∑
j o
2
j the squared norm of the whole output vector, which we can compute cheaply, irrespective of
D, as we did above3. This family does not include the standard softmax loss log exp(oc)∑
j exp(oj)
, but it
does include the spherical softmax4: log o
2
c+∑
j(o
2
j+)
. Due to space constraints we will not detail this
extension here, only give a sketch of how it can be obtained. Deriving it may not appear obvious at
first, but it is relatively straightforward once we realize that: a) the gain in computing the squared
error loss comes from being able to very cheaply compute the sum of squared activations ‖o‖2 (a
scalar quantity), and will thus apply equally well to other losses that can be expressed based on that
quantity (like the spherical softmax). b) generalizing our gradient update trick to such losses follows
naturally from gradient backpropagation: the gradient is first backpropagated from the final loss to
the scalar sum of squared activations, and from there on follows the same path and update procedure
as for the squared error loss.
4 Experimental validation
We implemented both a CPU version using blas and a parallel GPU (Cuda) version using cublas
of the proposed algorithm5. We evaluated the GPU and CPU implementations by training word
embeddings with simple neural language models, in which a probability map of the next word
given its preceding n-gram is learned by a neural network. We used a Nvidia Titan Black GPU
and a i7-4820K @ 3.70GHz CPU and ran experiments on the one billion word dataset[15], which
is composed of 0.8 billions words belonging to a vocabulary of 0.8 millions words. We evaluated
the resulting word embeddings with the recently introduced Simlex-999 score [16], which measures
the similarity between words. We also compared our approach to unfactorised versions and to a
two-layer hierarchical softmax. Figure 2 and 3 (left) illustrate the practical speedup of our approach
for the output layer only. Figure 3 (right) shows that out LST (Large Sparse Target) models are
much faster to train than the softmax models and converge to only slightly lower Simlex-999 scores.
Table 1 summarizes the speedups for the different output layers we tried, both on CPU and GPU.
We also empirically verified that our proposed factored algorithm learns the model weights (V U) as
the corresponding naive unfactored algorithm’s W , as it theoretically should, and followed the same
learning curves (as a function of number of iterations, not time!).
5 Conclusion and future work
We introduced a new algorithmic approach to efficiently compute the exact gradient updates for
training deep networks with very large sparse targets. Remarkably the complexity of the algorithm
is independent of the target size, which allows tackling very large problems. Our CPU and GPU
implementations yield similar speedups to the theoretical one and can thus be used in practical
applications, which could be explored in further work. In particular, neural language models seem
good candidates. But it remains unclear how using a loss function other than the usual softmax might
affect the quality of the resulting word embeddings so further research needs to be carried out in this
direction. This includes empirically investigating natural extensions of the approach we described
to other possible losses in the spherical family such as the spherical-softmax.
Acknowledgements: We wish to thank Yves Grandvalet for stimulating discussions, Çağlar
Gülçehre for pointing us to [14], the developers of Theano [17, 18] and Blocks [19] for making
these libraries available to build on, and NSERC and Ubisoft for their financial support.
3In addition loss functions in this family are also allowed to depend on sum(o) =
∑
j oj which we can also
compute cheaply without computing o, by tracking w̄ =
∑
j W:j whereby sum(o) =
∑
j W
T
:j h = w̄
Th.
4where c is the correct class label, and  is a small positive constant that we added to the spherical interpre-
tation in [14] for numerical stability: to guarantee we never divide by 0 nor take the log of 0.
5Open source code is available at: https://github.com/pascal20100/factored_output_layer
7
Table 1: Speedups with respect to the baseline naive model on CPU, for a minibatch of 128 and the
whole vocabulary of D = 793471 words. This is a model with two hidden layers of d = 300 neurons.
Model output layer only speedup whole model speedup
cpu unfactorised (naive) 1 1
gpu unfactorised (naive) 6.8 4.7
gpu hierarchical softmax 125.2 178.1
cpu factorised 763.3 501
gpu factorised 3257.3 1852.3
0 2000 4000 6000 8000 10000
Size of the vocabulary D
0.000
0.002
0.004
0.006
0.008
0.010
T
im
in
g
 (
se
c)
 o
f 
a
 m
in
ib
a
tc
h
 o
f 
si
ze
 1
2
8
un-factorised CPU
un-factorised GPU
factorised GPU
factorised CPU
h_softmax GPU
101 102 103 104 105 106
Size of the vocabulary D
10-3
10-2
10-1
100
101
T
im
in
g
 (
se
c)
 o
f 
a
 m
in
ib
a
tc
h
 o
f 
si
ze
 1
2
8
un-factorised CPU
un-factorised GPU
factorised GPU
factorised CPU
h_softmax GPU
Figure 2: Timing of different algorithms. Time taken by forward and backward propagations in the
output layer, including weight update, on a minibatch of size 128 for different sizes of vocabulary
D on both CPU and GPU. The input size d is fixed to 300. The Timing of a 2 layer hierarchical
softmax efficient GPU implementation (h_softmax) is also provided for comparison. Right plot is
in log-log scale. As expected, the timings of factorized versions are independent of vocabulary size.
0 100 200 300 400 500 600 700 800
Size of the vocabulary D (in thousands)
0
200
400
600
800
1000
1200
1400
S
p
e
e
d
u
p
cpu_unfact / cpu_fact, experimental
gpu_unfact / gpu_fact, experimental
unfact / fact, theoretical
cpu_unfact / gpu_fact, experimental
cpu_unfact / gpu_unfact, experimental
10-1 100 101 102 103
Training time (hours)
−0.10
−0.05
0.00
0.05
0.10
0.15
0.20
0.25
S
im
Le
x
-9
9
9
LST CPU
LST GPU
Softmax CPU
Softmax GPU
H-Softmax GPU
Figure 3: Left: Practical and theoretical speedups for different sizes of vocabulary D and fixed input
size d=300. The practical unfact / fact speedup is similar to the theoretical one. Right: Evolution
of the Simlex-999 score obtained with different models as a function of training time (CPU softmax
times were extrapolated from fewer iterations). Softmax models are zero hidden-layer models, while
our large sparse target (LST) models have two hidden layers. These were the best architectures
retained in both cases (surprisingly the softmax models with hidden layers performed no better on
this task). The extra non-linear layers in LST may help compensate for the lack of a softmax. LST
models converge to slightly lower scores at similar speed as the hierarchical softmax model but
significantly faster than softmax models.
8
References
[1] Y. Bengio, R. Ducharme, and P. Vincent. A neural probabilistic language model. In Advances in Neural
Information Processing Systems 13 (NIPS’00), pages 932–938, 2001.
[2] R. Collobert, J. Weston, L. Bottou, M. Karlen, K. Kavukcuoglu, and P. Kuksa. Natural language process-
ing (almost) from scratch. Journal of Machine Learning Research, 12:2493–2537, 2011.
[3] Y. Dauphin, X. Glorot, and Y. Bengio. Large-scale learning of embeddings with reconstruction sampling.
In Proceedings of the 28th International Conference on Machine learning, ICML ’11, 2011.
[4] S. Jean, K. Cho, R. Memisevic, and Y. Bengio. On using very large target vocabulary for neural machine
translation. In ACL-IJCNLP’2015, 2015. arXiv:1412.2007.
[5] M. Gutmann and A. Hyvarinen. Noise-contrastive estimation: A new estimation principle for unnormal-
ized statistical models. In Proceedings of The Thirteenth International Conference on Artificial Intelli-
gence and Statistics (AISTATS’10), 2010.
[6] A. Mnih and K. Kavukcuoglu. Learning word embeddings efficiently with noise-contrastive estimation.
In Advances in Neural Information Processing Systems 26, pages 2265–2273. 2013.
[7] T. Mikolov, I. Sutskever, K. Chen, G. Corrado, and J. Dean. Distributed representations of words and
phrases and their compositionality. In NIPS’2013, pages 3111–3119. 2013.
[8] A. Shrivastava and P. Li. Asymmetric LSH (ALSH) for sublinear time maximum inner product search
(MIPS). In Advances in Neural Information Processing Systems 27, pages 2321–2329. 2014.
[9] S. Vijayanarasimhan, J. Shlens, R. Monga, and J. Yagnik. Deep networks with large output spaces.
arxiv:1412.7479, 2014.
[10] F. Morin and Y. Bengio. Hierarchical probabilistic neural network language model. In Proceedings of the
Tenth International Workshop on Artificial Intelligence and Statistics, pages 246–252, 2005.
[11] D. Rumelhart, G. Hinton, and R. Williams. Learning representations by back-propagating errors. Nature,
323:533–536, 1986.
[12] Y. LeCun. Une procédure d’apprentissage pour Réseau à seuil assymétrique. In Cognitiva 85: A la
Frontière de l’Intelligence Artificielle, des Sciences de la Connaissance et des Neurosciences, pages 599–
604, 1985.
[13] Y. LeCun. Learning processes in an asymmetric threshold network. In Disordered Systems and Biological
Organization, pages 233–240. Les Houches 1985, 1986.
[14] Y. Ollivier. Riemannian metrics for neural networks. CoRR, abs/1303.0818, 2013.
[15] C. Chelba, T. Mikolov, M. Schuster, Q. Ge, T. Brants, P. Koehn, and T. Robinson. One billion word
benchmark for measuring progress in statistical language modeling. In INTERSPEECH 2014, 15th Annual
Conference of the International Speech Communication Association, Singapore, September 14-18, 2014,
pages 2635–2639, 2014.
[16] F. Hill, R. Reichart, and A. Korhonen. Simlex-999: Evaluating semantic models with (genuine) similarity
estimation. CoRR, abs/1408.3456, 2014.
[17] J. Bergstra, O. Breuleux, F. Bastien, P. Lamblin, R. Pascanu, G. Desjardins, J. Turian, D. Warde-Farley,
and Y. Bengio. Theano: a CPU and GPU math expression compiler. In Proceedings of the Python for
Scientific Computing Conference (SciPy), 2010. Oral Presentation.
[18] F. Bastien, P. Lamblin, R. Pascanu, J. Bergstra, I. J. Goodfellow, A. Bergeron, N. Bouchard, and Y. Bengio.
Theano: new features and speed improvements. Deep Learning and Unsupervised Feature Learning NIPS
2012 Workshop, 2012.
[19] B. van Merriënboer, D. Bahdanau, V. Dumoulin, D. Serdyuk, D. Warde-Farley, J. Chorowski, and Y. Ben-
gio. Blocks and Fuel: Frameworks for deep learning. ArXiv e-prints, June 2015.
9
