


Paper ID = 6024
Title = Regret Lower Bound and Optimal Algorithm in
Finite Stochastic Partial Monitoring
Junpei Komiyama
The University of Tokyo
junpei@komiyama.info
Junya Honda
The University of Tokyo
honda@stat.t.u-tokyo.ac.jp
Hiroshi Nakagawa
The University of Tokyo
nakagawa@dl.itc.u-tokyo.ac.jp
Abstract
Partial monitoring is a general model for sequential learning with limited feed-
back formalized as a game between two players. In this game, the learner chooses
an action and at the same time the opponent chooses an outcome, then the learner
suffers a loss and receives a feedback signal. The goal of the learner is to mini-
mize the total loss. In this paper, we study partial monitoring with finite actions
and stochastic outcomes. We derive a logarithmic distribution-dependent regret
lower bound that defines the hardness of the problem. Inspired by the DMED
algorithm (Honda and Takemura, 2010) for the multi-armed bandit problem, we
propose PM-DMED, an algorithm that minimizes the distribution-dependent re-
gret. PM-DMED significantly outperforms state-of-the-art algorithms in numeri-
cal experiments. To show the optimality of PM-DMED with respect to the regret
bound, we slightly modify the algorithm by introducing a hinge function (PM-
DMED-Hinge). Then, we derive an asymptotically optimal regret upper bound of
PM-DMED-Hinge that matches the lower bound.
1 Introduction
Partial monitoring is a general framework for sequential decision making problems with imperfect
feedback. Many classes of problems, including prediction with expert advice [1], the multi-armed
bandit problem [2], dynamic pricing [3], the dark pool problem [4], label efficient prediction [5],
and linear and convex optimization with full or bandit feedback [6, 7] can be modeled as an instance
of partial monitoring.
Partial monitoring is formalized as a repeated game played by two players called a learner and an
opponent. At each round, the learner chooses an action, and at the same time the opponent chooses
an outcome. Then, the learner observes a feedback signal from a given set of symbols and suffers
some loss, both of which are deterministic functions of the selected action and outcome.
The goal of the learner is to find the optimal action that minimizes his/her cumulative loss. Alter-
natively, we can define the regret as the difference between the cumulative losses of the learner and
the single optimal action, and minimization of the loss is equivalent to minimization of the regret.
A learner with a small regret balances exploration (acquisition of information about the strategy of
the opponent) and exploitation (utilization of information). The rate of regret indicates how fast the
learner adapts to the problem: a linear regret indicates the inability of the learner to find the optimal
action, whereas a sublinear regret indicates that the learner can approach the optimal action given
sufficiently large time steps.
1
The study of partial monitoring is classified into two settings with respect to the assumption on the
outcomes. On one hand, in the stochastic setting, the opponent chooses an outcome distribution
before the game starts, and an outcome at each round is an i.i.d. sample from the distribution. On
the other hand, in the adversarial setting, the opponent chooses the outcomes to maximize the regret
of the learner. In this paper, we study the former setting.
1.1 Related work
The paper by Piccolboni and Schindelhauer [8] is one of the first to study the regret of the finite par-
tial monitoring problem. They proposed the FeedExp3 algorithm, which attains O(T 3/4) minimax
regret on some problems. This bound was later improved by Cesa-Bianchi et al. [9] to O(T 2/3),
who also showed an instance in which the bound is optimal. Since then, most literature on partial
monitoring has dealt with the minimax regret, which is the worst-case regret over all possible op-
ponent’s strategies. Bartók et al. [10] classified the partial monitoring problems into four categories
in terms of the minimax regret: a trivial problem with zero regret, an easy problem with Θ̃(
√
T )
regret1, a hard problem with Θ(T 2/3) regret, and a hopeless problem with Θ(T ) regret. This shows
that the class of the partial monitoring problems is not limited to the bandit sort but also includes
larger classes of problems, such as dynamic pricing. Since then, several algorithms with a Õ(
√
T )
regret bound for easy problems have been proposed [11, 12, 13]. Among them, the Bayes-update
Partial Monitoring (BPM) algorithm [13] is state-of-the-art in the sense of empirical performance.
Distribution-dependent and minimax regret: we focus on the distribution-dependent regret that
depends on the strategy of the opponent. While the minimax regret in partial monitoring has been ex-
tensively studied, little has been known on distribution-dependent regret in partial monitoring. To the
authors’ knowledge, the only paper focusing on the distribution-dependent regret in finite discrete
partial monitoring is the one by Bartók et al. [11], which derivedO(log T ) distribution-dependent re-
gret for easy problems. In contrast to this situation, much more interest in the distribution-dependent
regret has been shown in the field of multi-armed bandit problems. Upper confidence bound (UCB),
the most well-known algorithm for the multi-armed bandits, has a distribution-dependent regret
bound [2, 14], and algorithms that minimize the distribution-dependent regret (e.g., KL-UCB) has
been shown to perform better than ones that minimize the minimax regret (e.g., MOSS), even in
instances in which the distributions are hard to distinguish (e.g., Scenario 2 in Garivier et al. [15]).
Therefore, in the field of partial monitoring, we can expect that an algorithm that minimizes the
distribution-dependent regret would perform better than the existing ones.
Contribution: the contributions of this paper lie in the following three aspects. First, we derive
the regret lower bound: in some special classes of partial monitoring (e.g., multi-armed bandits), an
O(log T ) regret lower bound is known to be achievable. In this paper, we further extend this lower
bound to obtain a regret lower bound for general partial monitoring problems. Second, we propose
an algorithm called Partial Monitoring DMED (PM-DMED). We also introduce a slightly modified
version of this algorithm (PM-DMED-Hinge) and derive its regret bound. PM-DMED-Hinge is the
first algorithm with a logarithmic regret bound for hard problems. Moreover, for both easy and hard
problems, it is the first algorithm with the optimal constant factor on the leading logarithmic term.
Third, performances of PM-DMED and existing algorithms are compared in numerical experiments.
Here, the partial monitoring problems consisted of three specific instances of varying difficulty. In
all instances, PM-DMED significantly outperformed the existing methods when a number of rounds
is large. The regret of PM-DMED on these problems quickly approached the theoretical lower
bound.
2 Problem Setup
This paper studies the finite stochastic partial monitoring problem with N actions, M outcomes,
and A symbols. An instance of the partial monitoring game is defined by a loss matrix L = (li,j) ∈
RN×M and a feedback matrix H = (hi,j) ∈ [A]N×M , where [A] = {1, 2, . . . , A}. At the be-
ginning, the learner is informed of L and H . At each round t = 1, 2, . . . , T , a learner selects an
action i(t) ∈ [N ], and at the same time an opponent selects an outcome j(t) ∈ [M ]. The learner
1Note that Θ̃ ignores a polylog factor.
2
suffers loss li(t),j(t), which he/she cannot observe: the only information the learner receives is the
signal hi(t),j(t) ∈ [A]. We consider a stochastic opponent whose strategy for selecting outcomes is
governed by the opponent’s strategy p∗ ∈ PM , where PM is a set of probability distributions over
an M -ary outcome. The outcome j(t) of each round is an i.i.d. sample from p∗.
p*
C1
C3
C4
C2
C5
||p*-C1
c||M
Figure 1: Cell decomposi-
tion of a partial monitoring
instance with M = 3.
The goal of the learner is to minimize the cumulative loss over T
rounds. Let the optimal action be the one that minimizes the loss in
expectation, that is, i∗ = arg mini∈[N ] L
⊤
i p
∗, where Li is the i-th
row of L. Assume that i∗ is unique. Without loss of generality, we
can assume that i∗ = 1. Let∆i = (Li−L1)⊤p∗ ∈ [0,∞) andNi(t)
be the number of rounds before the t-th in which action i is selected.
The performance of the algorithm is measured by the (pseudo) regret,
Regret(T ) =
T∑
t=1
∆i(t) =
∑
i∈[N ]
∆iNi(T + 1),
which is the difference between the expected loss of the learner and
the optimal action. It is easy to see that minimizing the loss is equiv-
alent to minimizing the regret. The expectation of the regret measures the performance of an algo-
rithm that the learner uses.
For each action i ∈ [N ], let Ci be the set of opponent strategies for which action i is optimal:
Ci = {q ∈ PM : ∀j ̸=i(Li − Lj)⊤q ≤ 0}.
We call Ci the optimality cell of action i. Each optimality cell is a convex closed polytope. Further-
more, we call the set of optimality cells {C1, . . . , CN} the cell decomposition as shown in Figure 1.
Let Cci = PM \ Ci be the set of strategies with which action i is not optimal.
The signal matrix Si ∈ {0, 1}A×M of action i is defined as (Si)k,j = 1[hi,j = k], where 1[X] = 1
if X is true and 0 otherwise. The signal matrix defined here is slightly different from the one
in the previous papers (e.g., Bartók et al. [10]) in which the number of rows of Si is the number
of the different symbols in the i-th row of H . The advantage in using the definition here is that,
Sip
∗ ∈ RA is a probability distribution over symbols that the algorithm observes when it selects
an action i. Examples of signal matrices are shown in Section 5. An instance of partial monitoring
is globally observable if for all pairs i, j of actions, Li − Lj ∈ ⊕k∈[N ]ImS⊤k . In this paper, we
exclusively deal with globally observable instances: in view of the minimax regret, this includes
trivial, easy, and hard problems.
3 Regret Lower Bound
A good algorithm should work well against any opponent’s strategy. We extend this idea by intro-
ducing the notion of strong consistency: a partial monitoring algorithm is strongly consistent if it
satisfies E[Regret(T )] = o(T a) for any a > 0 and p ∈ PM given L and H .
In the context of the multi-armed bandit problem, Lai and Robbins [2] derived the regret lower
bound of a strongly consistent algorithm: an algorithm must select each arm i until its number of
draws Ni(t) satisfies log t ≲ Ni(t)d(θi∥θ1), where d(θi∥θ1) is the KL divergence between the two
one-parameter distributions from which the rewards of action i and the optimal action are generated.
Analogously, in the partial monitoring problem, we can define the minimum number of observations.
Lemma 1. For sufficiently large T , a strongly consistent algorithm satisfies:
∀q∈Cc1
∑
i∈[N ]
E[Ni(T )]D(p∗i ∥Siq) ≥ log T − o(log T ),
where p∗i = Sip
∗ and D(p∥q) =
∑
i(p)i log ((p)i/(q)i) is the KL divergence between two discrete
distributions, in which we define 0 log 0/0 = 0.
Lemma 1 can be interpreted as follows: for each round t, consistency requires the algorithm to
make sure that the possible risk that action i ̸= 1 is optimal is smaller than 1/t. Large devia-
tion principle [16] states that, the probability that an opponent with strategy q behaves like p∗ is
3
roughly exp (−
∑
i Ni(t)D(p
∗
i ∥Siq)). Therefore, we need to continue exploration of the actions
until
∑
i Ni(t)D(p
∗
i ∥Siq) ∼ log t holds for any q ∈ Cc1 to reduce the risk to exp (− log t) = 1/t.
The proof of Lemma 1 is in Appendix B in the supplementary material. Based on the technique
used in Lai and Robbins [2], the proof considers a modified game in which another action i ̸= 1 is
optimal. The difficulty in proving the lower bound in partial monitoring lies in that, the feedback
structure can be quite complex: for example, to confirm the superiority of action 1 over 2, one might
need to use the feedback from action 3 /∈ {1, 2}. Still, we can derive the lower bound by utilizing
the consistency of the algorithm in the original and modified games.
We next derive a lower bound on the regret based on Lemma 1. Note that, the expectation of the
regret can be expressed as E[Regret(T )] =
∑
i ̸=1 E[Ni(t)](Li − L1)⊤p∗. Let
Rj({pi}) =
{
{ri}i ̸=j ∈ [0,∞)N−1 : inf
q∈cl(Ccj ):pj=Sjq
∑
i
riD(pi∥Siq) ≥ 1
}
,
where cl(·) denotes a closure. Moreover, let
C∗j (p, {pi}) = inf
ri∈Rj({pi})
∑
i ̸=j
ri(Li − Lj)⊤p ,
the optimal solution of which is
R∗j (p, {pi}) =
{
{ri}i̸=j ∈ Rj({pi}) :
∑
i ̸=j
ri(Li − Lj)⊤p = C∗j (p, {pi})
}
.
The value C∗1 (p
∗, {p∗i }) log T is the possible minimum regret for observations such that the mini-
mum divergence of p∗ from any q ∈ Cc1 is larger than log T . Using Lemma 1 yields the following
regret lower bound:
Theorem 2. The regret of a strongly consistent algorithm is lower bounded as:
E[Regret(T )] ≥ C∗1 (p∗, {p∗i }) log T − o(log T ).
From this theorem, we can naturally measure the harshness of the instance byC∗1 (p
∗, {p∗i }), whereas
the past studies (e.g., Vanchinathan et al. [13]) ambiguously define the harshness as the closeness to
the boundary of the cells. Furthermore, we show in Lemma 5 in the Appendix that C∗1 (p
∗, {p∗i }) =
O(N/∥p∗ − Cc1∥2M ): the regret bound has at most quadratic dependence on ∥p∗ − Cc1∥M , which is
defined in Appendix D as the closeness of p∗ to the boundary of the optimal cell.
4 PM-DMED Algorithm
In this section, we describe the partial monitoring deterministic minimum empirical divergence (PM-
DMED) algorithm, which is inspired by DMED [17] for solving the multi-armed bandit problem.
Let p̂i(t) ∈ [0, 1]A be the empirical distribution of the symbols under the selection of action i.
Namely, the k-th element of p̂i(t) is (
∑t−1
t′=1 1[i(t
′) = i∩hi(t′),j(t′) = k])/(
∑t−1
t′=1 1[i(t
′) = i]). We
sometimes omit t from p̂i when it is clear from the context. Let the empirical divergence of q ∈ PM
be
∑
i∈[N ] Ni(t)D(p̂i(t)∥Siq), the exponential of which can be considered as a likelihood that q is
the opponent’s strategy.
The main routine of PM-DMED is in Algorithm 1. At each loop, the actions in the current list ZC
are selected once. The list for the actions in the next loop ZN is determined by the subroutine in
Algorithm 2. The subroutine checks whether the empirical divergence of each point q ∈ Cc1 is larger
than log t or not (Eq. (3)). If it is large enough, it exploits the current information by selecting î(t),
the optimal action based on the estimation p̂(t) that minimizes the empirical divergence. Otherwise,
it selects the actions with the number of observations below the minimum requirement for making
the empirical divergence of each suboptimal point q ∈ Cc1 larger than log t.
Unlike the N -armed bandit problem in which a reward is associated with an action, in the partial
monitoring problem, actions, outcomes, and feedback signals can be intricately related. Therefore,
we need to solve a non-trivial optimization to run PM-DMED. Later in Section 5, we discuss a
practical implementation of the optimization.
4
Algorithm 1 Main routine of PM-DMED and
PM-DMED-Hinge
1: Initialization: select each action once.
2: ZC , ZR ← [N ], ZN ← ∅.
3: while t ≤ T do
4: for i(t) ∈ ZC in an arbitrarily fixed order
do
5: Select i(t), and receive feedback.
6: ZR ← ZR \ {i(t)}.
7: Add actions to ZN in accordance with{
Algorithm 2 (PM-DMED)
Algorithm 3 (PM-DMED-Hinge)
.
8: t ← t+ 1.
9: end for
10: ZC , ZR ← ZN , ZN ← ∅.
11: end while
Algorithm 2 PM-DMED subroutine for adding
actions to ZN (without duplication).
1: Parameter: c > 0.
2: Compute an arbitrary p̂(t) such that
p̂(t)∈ arg min
q
∑
i
Ni(t)D(p̂i(t)∥Siq) (1)
and let î(t) = arg mini L
⊤
i p̂(t).
3: If î(t) /∈ ZR then put î(t) into ZN .
4: If there are actions i /∈ ZR such that
Ni(t) < c
√
log t (2)
then put them into ZN .
5: If
{Ni(t)/ log t}i ̸=î(t) /∈ Rî(t)({p̂i(t)}) (3)
then compute some
{r∗i }i ̸=î(t) ∈ R
∗
î(t)
(p̂(t), {p̂i(t)}) (4)
and put all actions i such that i /∈ ZR and
r∗i > Ni(t)/ log t into ZN .
Necessity of
√
log T exploration: PM-DMED tries to observe each action to some extent (Eq. (2)),
which is necessary for the following reason: consider a four-state game characterized by
L =
 0 1 1 010 1 0 010 0 1 0
11 11 11 11
 , H =
 1 1 1 11 2 2 31 2 2 3
1 1 2 2
 , and p∗ = (0.1, 0.2, 0.3, 0.4)⊤.
The optimal action here is action 1, which does not yield any useful information. By using action 2,
one receives three kinds of symbols from which one can estimate (p∗)1, (p∗)2 + (p∗)3, and (p∗)4,
where (p∗)j is the j-th component of p∗. From this, an algorithm can find that (p∗)1 is not very
small and thus the expected loss of actions 2 and 3 is larger than that of action 1. Since the feedback
of actions 2 and 3 are the same, one may also use action 3 in the same manner. However, the loss per
observation is 1.2 and 1.3 for actions 2 and 3, respectively, and thus it is better to use action 2. This
difference comes from the fact that (p∗)2 = 0.2 < 0.3 = (p∗)3. Since an algorithm does not know
p∗ beforehand, it needs to observe action 4, the only source for distinguishing (p∗)2 from (p∗)3.
Yet, an optimal algorithm cannot select it more than Ω(log T ) times because it affects the O(log T )
factor in the regret. In fact, O((log T )a) observations of action 4 with some a > 0 are sufficient to
be convinced that (p∗)2 < (p∗)3 with probability 1 − o(1/T poly(a)). For this reason, PM-DMED
selects each action
√
log t times.
5 Experiment
Following Bartók et al. [11], we compared the performances of algorithms in three different games:
the four-state game (Section 4), a three-state game and dynamic pricing. Experiments on the N -
armed bandit game was also done, and the result is shown in Appendix C.1 .
The three-state game, which is classified as easy in terms of the minimax regret, is characterized by:
L =
(
1 1 0
0 1 1
1 0 1
)
and H =
(
1 2 2
2 1 2
2 2 1
)
.
The signal matrices of this game are,
S1 =
(
1 0 0
0 1 1
)
, S2 =
(
0 1 0
1 0 1
)
, and S3 =
(
0 0 1
1 1 0
)
.
5
10
0
10
1
10
2
10
3
10
4
10
5
10
6
t: round
0
20
40
60
80
100
120
R
(t
):
re
g
re
t
Random
FeedExp3
CBP
BPM-LEAST
BPM-TS
PM-DMED
LB
(a) three-states, benign
10
0
10
1
10
2
10
3
10
4
10
5
10
6
t: round
0
100
200
300
400
500
600
R
(t
):
re
g
re
t
Random
FeedExp3
CBP
BPM-LEAST
BPM-TS
PM-DMED
LB
(b) three-states, intermediate
10
3
10
4
10
5
10
6
t: round
0
500
1000
1500
2000
2500
3000
R
(t
):
re
g
re
t
Random
FeedExp3
CBP
BPM-LEAST
BPM-TS
PM-DMED
LB
(c) three-states, harsh
10
0
10
1
10
2
10
3
10
4
10
5
10
6
t: round
0
200
400
600
800
1000
1200
1400
R
(t
):
re
g
re
t
Random
FeedExp3
CBP
BPM-LEAST
BPM-TS
PM-DMED
LB
(d) dynamic pricing, benign
10
0
10
1
10
2
10
3
10
4
10
5
10
6
t: round
0
1000
2000
3000
4000
5000
6000
R
(t
):
re
g
re
t
Random
FeedExp3
CBP
BPM-LEAST
BPM-TS
PM-DMED
LB
(e) dynamic pricing, intermediate
10
3
10
4
10
5
10
6
t: round
0
20000
40000
60000
80000
100000
120000
R
(t
):
re
g
re
t
Random
FeedExp3
CBP
BPM-LEAST
BPM-TS
PM-DMED
LB
(f) dynamic pricing, harsh
10
0
10
1
10
2
10
3
10
4
10
5
10
6
t: round
0
500
1000
1500
2000
R
(t
):
re
g
re
t
Random
CBP
BPM-LEAST
BPM-TS
PM-DMED
LB
(g) four-states
Figure 2: Regret-round semilog plots of algorithms. The regrets are averaged over 100 runs. LB is
the asymptotic regret lower bound of Theorem 2.
Dynamic pricing, which is classified as hard in terms of the minimax regret, is a game that models
a repeated auction between a seller (learner) and a buyer (opponent). At each round, the seller sets
a price for a product, and at the same time, the buyer secretly sets a maximum price he is willing to
pay. The signal is “buy” or “no-buy”, and the seller’s loss is either a given constant (no-buy) or the
difference between the buyer’s and the seller’s prices (buy). The loss and feedback matrices are:
L =

0 1 . . . N − 1
c 0 . . . N − 2
...
. . . . . .
...
c . . . c 0
 and H =

2 2 . . . 2
1 2 . . . 2
...
. . . . . .
...
1 . . . 1 2
 ,
where signals 1 and 2 correspond to no-buy and buy. The signal matrix of action i is
Si =
( i−1︷ ︸︸ ︷
1 . . . 1
0 . . . 0
M−i+1︷ ︸︸ ︷
0 . . . 0
1 . . . 1
)
.
Following Bartók et al. [11], we set N = 5,M = 5, and c = 2.
In our experiments with the three-state game and dynamic pricing, we tested three settings regarding
the harshness of the opponent: at the beginning of a simulation, we sampled 1,000 points uniformly
at random from PM , then sorted them by C∗1 (p∗, {p∗i }). We chose the top 10%, 50%, and 90%
harshest ones as the opponent’s strategy in the harsh, intermediate, and benign settings, respectively.
We compared Random, FeedExp3 [8], CBP [11] with α = 1.01, BPM-LEAST, BPM-TS [13], and
PM-DMED with c = 1. Random is a naive algorithm that selects an action uniformly random.
FeedExp3 requires a matrix G such that H⊤G = L⊤, and thus one cannot apply it to the four-state
game. CBP is an algorithm of logarithmic regret for easy games. The parameters η and f(t) of
CBP were set in accordance with Theorem 1 in their paper. BPM-LEAST is a Bayesian algorithm
with Õ(
√
T ) regret for easy games, and BPM-TS is a heuristic of state-of-the-art performance. The
priors of two BPMs were set to be uninformative to avoid a misspecification, as recommended in
their paper.
6
Algorithm 3 PM-DMED-Hinge subroutine for adding actions to ZN (without duplication).
1: Parameters: c > 0, f(n) = bn−1/2 for b > 0, α(t) = a/(log log t) for a > 0.
2: Compute arbitrary p̂(t) which satisfies
p̂(t) ∈ arg min
q
∑
i
Ni(t)(D(p̂i(t)∥Siq)− f(Ni(t)))+ (5)
and let î(t) = arg mini L
⊤
i p̂(t).
3: If î(t) /∈ ZR then put î(t) into ZN .
4: If
p̂(t) /∈ Cî(t),α(t) (6)
or there exists an action i such that
D(p̂i(t)∥Sip̂(t)) > f(Ni(t)) (7)
then put all actions i /∈ ZR into ZN .
5: If there are actions i such that
Ni(t) < c
√
log t (8)
then put the actions not in ZR into ZN .
6: If
{Ni(t)/ log t}i ̸=î(t) /∈ Rî(t)({p̂i(t), f(Ni(t))}) (9)
then compute some
{r∗i }i ̸=î(t) ∈ R
∗
î(t)
(p̂(t), {p̂i(t), f(Ni(t))}) (10)
and put all actions such that i /∈ ZR and r∗i > Ni(t)/ log t into ZN . If such r∗i is infeasible then
put all action i /∈ ZR into ZN .
The computation of p̂(t) in (1) and the evaluation of the condition in (3) involve convex optimiza-
tions, which were done with Ipopt [18]. Moreover, obtaining {r∗i } in (4) is classified as a linear
semi-infinite programming (LSIP) problem, a linear programming (LP) with finitely many variables
and infinitely many constraints. Following the optimization of BPM-LEAST [13], we resorted to a
finite sample approximation and used the Gurobi LP solver [19] in computing {r∗i }: at each round,
we sampled 1,000 points from PM , and relaxed the constraints on the samples. To speed up the
computation, we skipped these optimizations in most rounds with large t and used the result of
the last computation. The computation of the coefficient C∗1 (p
∗, {p∗i }) of the regret lower bound
(Theorem 2) is also an LSIP, which was approximated by 100,000 sample points from Cc1.
The experimental results are shown in Figure 2. In the four-state game and the other two games with
an easy or intermediate opponent, PM-DMED outperforms the other algorithms when the number of
rounds is large. In particular, in the dynamic pricing game with an intermediate opponent, the regret
of PM-DMED at T = 106 is ten times smaller than those of the other algorithms. Even in the harsh
setting in which the minimax regret matters, PM-DMED has some advantage over all algorithms
except for BPM-TS. With sufficiently large T , the slope of an optimal algorithm should converge to
LB. In all games and settings, the slope of PM-DMED converges to LB, which is empirical evidence
of the optimality of PM-DMED.
6 Theoretical Analysis
Section 5 shows that the empirical performance of PM-DMED is very close to the regret lower
bound in Theorem 2. Although the authors conjecture that PM-DMED is optimal, it is hard to
analyze PM-DMED. The technically hardest part arises from the case in which the divergence of
each action is small but not yet fully converged. To circumvent this difficulty, we can introduce a
discount factor. Let
Rj({pi, δi})=
{
{ri}i ̸=j ∈ [0,∞)N−1 : inf
q∈cl(Ccj ):D(pj∥Sjq)≤δj
∑
i
ri(D(pi∥Siq)−δi)+ ≥ 1
}
, (11)
where (X)+ = max(X, 0). Note that Rj({pi, δi}) in (11) is a natural generalization of Rj({pi})
in Section 4 in the sense that Rj({pi, 0}) = Rj({pi}). Event {Ni(t)/ log t}i ̸=1 ∈ R1({p̂i(t), δi})
means that the number of observations {Ni(t)} is enough to ensure that the “{δi}-discounted” em-
pirical divergence of each q ∈ Cc1 is larger than log t. Analogous toRj({pi, δi}), we define
7
C∗j (p, {pi, δi}) = inf{ri}i ̸=j∈Rj({pi,δi}))
∑
i ̸=j
ri(Lj − Li)⊤p
and its optimal solution by
R∗j (p, {pi, δi}) =
{
{ri}i̸=j ∈ Rj({pi, δi}) :
∑
i ̸=j
ri(Lj − Li)⊤p = C∗j (p, {pi, δi})
}
.
We also define Ci,α = {p ∈ PM : L⊤i p + α ≤ minj ̸=i L⊤j p}, the optimal region of action i
with margin. PM-DMED-Hinge shares the main routine of Algorithm 1 with PM-DMED and lists
the next actions by Algorithm 3. Unlike PM-DMED, it (i) discounts f(Ni(t)) from the empirical
divergenceD(p̂i(t)∥Siq). Moreover, (ii) when p̂(t) is close to the cell boundary, it encourages more
exploration to identify the cell it belongs to by Eq. (6).
Theorem 3. Assume that the following regularity conditions hold for p∗. (1) R∗1(p, {pi, δi}) is
unique at p = p∗, pi = Sip∗, δi = 0. Moreover, (2) for Sδ = {q : D(p∗1∥S1q) ≤ δ}, it holds that
cl(int(Cc1) ∩ Sδ) = cl(cl(Cc1) ∩ Sδ) for all δ ≥ 0 in some neighborhood of δ = 0, where cl(·) and
int(·) denote the closure and the interior, respectively. Then,
E[Regret(T )] ≤ C∗1 (p∗, {p∗i }) log T + o(log T ) .
We prove this theorem in Appendix D . Recall thatR∗1(p, {p̂i(t), δi}) is the set of optimal solutions
of an LSIP. In this problem, KKT conditions and the duality theorem apply as in the case of finite
constraints; thus, we can check whether Condition 1 holds or not for each p∗ (see, e.g., Ito et al. [20]
and references therein). Condition 2 holds in most cases, and an example of an exceptional case is
shown in Appendix A.
Theorem 3 states that PM-DMED-Hinge has a regret upper bound that matches the lower bound of
Theorem 2.
Corollary 4. (Optimality in the N -armed bandit problem) In the N -armed Bernoulli bandit prob-
lem, the regularity conditions in Theorem 3 always hold. Moreover, the coefficient of the lead-
ing logarithmic term in the regret bound of the partial monitoring problem is equal to the bound
given in Lai and Robbins [2]. Namely, C∗1 (p
∗, {p∗i }) =
∑N
i ̸=1(∆i/d(µi∥µ1)), where d(p∥q) =
p log (p/q) + (1− p) log ((1− p)/(1− q)) is the KL-divergence between Bernoulli distributions.
Corollary 4, which is proven in Appendix C, states that PM-DMED-Hinge attains the optimal regret
of the N -armed bandit if we run it on an N -armed bandit game represented as partial monitoring.
Asymptotic analysis: it is Theorem 6 where we lose the finite-time property. This theorem shows
the continuity of the optimal solution set R∗1(p, {pi, δi}) of C∗j (p, {pj}), which does not mention
how closeR∗1(p, {pi, δi}) is toR∗1(p∗, {p∗i , 0}) ifmax{∥p−p∗∥M ,maxi ∥pi−p∗i ∥M ,maxi δi} ≤ δ
for given δ. To obtain an explicit bound, we need sensitivity analysis, the theory of the robustness
of the optimal value and the solution for small deviations of its parameters (see e.g., Fiacco [21]).
In particular, the optimal solution of partial monitoring involves an infinite number of constraints,
which makes the analysis quite hard. For this reason, we will not perform a finite-time analysis.
Note that, the N -armed bandit problem is a special instance in which we can avoid solving the
above optimization and a finite-time optimal bound is known.
Necessity of the discount factor: we are not sure whether discount factor f(n) in PM-DMED-
Hinge is necessary or not. We also empirically tested PM-DMED-Hinge: although it is better than
the other algorithms in many settings, such as dynamic pricing with an intermediate opponent, it
is far worse than PM-DMED. We found that our implementation, which uses the Ipopt nonlinear
optimization solver, was sometimes inaccurate at optimizing (5): there were some cases in which
the true p∗ satisfies ∀i∈[N ]D(p̂i(t)∥Sip∗) − f(Ni(t)) = 0, while the solution p̂(t) we obtained
had non-zero hinge values. In this case, the algorithm lists all actions from (7), which degrades
performance. Determining whether the discount factor is essential or not is our future work.
Acknowledgements
The authors gratefully acknowledge the advice of Kentaro Minami and sincerely thank the anony-
mous reviewers for their useful comments. This work was supported in part by JSPS KAKENHI
Grant Number 15J09850 and 26106506.
8
References
[1] Nick Littlestone and Manfred K. Warmuth. The weighted majority algorithm. Inf. Comput.,
108(2):212–261, February 1994.
[2] T. L. Lai and Herbert Robbins. Asymptotically efficient adaptive allocation rules. Advances in
Applied Mathematics, 6(1):4–22, 1985.
[3] Robert D. Kleinberg and Frank Thomson Leighton. The value of knowing a demand curve:
Bounds on regret for online posted-price auctions. In FOCS, pages 594–605, 2003.
[4] Alekh Agarwal, Peter L. Bartlett, and Max Dama. Optimal allocation strategies for the dark
pool problem. In AISTATS, pages 9–16, 2010.
[5] Nicolò Cesa-Bianchi, Gábor Lugosi, and Gilles Stoltz. Minimizing regret with label efficient
prediction. IEEE Transactions on Information Theory, 51(6):2152–2162, 2005.
[6] Martin Zinkevich. Online convex programming and generalized infinitesimal gradient ascent.
In ICML, pages 928–936, 2003.
[7] Varsha Dani, Thomas P. Hayes, and Sham M. Kakade. Stochastic linear optimization under
bandit feedback. In COLT, pages 355–366, 2008.
[8] Antonio Piccolboni and Christian Schindelhauer. Discrete prediction games with arbitrary
feedback and loss. In COLT, pages 208–223, 2001.
[9] Nicolò Cesa-Bianchi, Gábor Lugosi, and Gilles Stoltz. Regret minimization under partial
monitoring. Math. Oper. Res., 31(3):562–580, 2006.
[10] Gábor Bartók, Dávid Pál, and Csaba Szepesvári. Minimax regret of finite partial-monitoring
games in stochastic environments. In COLT, pages 133–154, 2011.
[11] Gábor Bartók, Navid Zolghadr, and Csaba Szepesvári. An adaptive algorithm for finite stochas-
tic partial monitoring. In ICML, 2012.
[12] Gábor Bartók. A near-optimal algorithm for finite partial-monitoring games against adversarial
opponents. In COLT, pages 696–710, 2013.
[13] Hastagiri P. Vanchinathan, Gábor Bartók, and Andreas Krause. Efficient partial monitoring
with prior information. In NIPS, pages 1691–1699, 2014.
[14] Peter Auer, Nicoló Cesa-bianchi, and Paul Fischer. Finite-time Analysis of the Multiarmed
Bandit Problem. Machine Learning, 47:235–256, 2002.
[15] Aurélien Garivier and Olivier Cappé. The KL-UCB algorithm for bounded stochastic bandits
and beyond. In COLT, pages 359–376, 2011.
[16] Amir Dembo and Ofer Zeitouni. Large deviations techniques and applications. Applications
of mathematics. Springer, New York, Berlin, Heidelberg, 1998.
[17] Junya Honda and Akimichi Takemura. An Asymptotically Optimal Bandit Algorithm for
Bounded Support Models. In COLT, pages 67–79, 2010.
[18] Andreas Wächter and Carl D. Laird. Interior point optimizer (IPOPT).
[19] Gurobi Optimization Inc. Gurobi optimizer.
[20] S. Ito, Y. Liu, and K. L. Teo. A dual parametrization method for convex semi-infinite program-
ming. Annals of Operations Research, 98(1-4):189–213, 2000.
[21] Anthony V. Fiacco. Introduction to sensitivity and stability analysis in nonlinear programming.
Academic Press, New York, 1983.
9
