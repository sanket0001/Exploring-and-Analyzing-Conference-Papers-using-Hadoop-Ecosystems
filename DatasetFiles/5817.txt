


Paper ID = 5817
Title = Regularization Path of
Cross-Validation Error Lower Bounds
Atsushi Shibagaki, Yoshiki Suzuki, Masayuki Karasuyama, and Ichiro Takeuchi
Nagoya Institute of Technology
Nagoya, 466-8555, Japan
{shibagaki.a.mllab.nit,suzuki.mllab.nit}@gmail.com
{karasuyama,takeuchi.ichiro}@nitech.ac.jp
Abstract
Careful tuning of a regularization parameter is indispensable in many machine
learning tasks because it has a significant impact on generalization performances.
Nevertheless, current practice of regularization parameter tuning is more of an art
than a science, e.g., it is hard to tell how many grid-points would be needed in
cross-validation (CV) for obtaining a solution with sufficiently small CV error. In
this paper we propose a novel framework for computing a lower bound of the CV
errors as a function of the regularization parameter, which we call regularization
path of CV error lower bounds. The proposed framework can be used for provid-
ing a theoretical approximation guarantee on a set of solutions in the sense that
how far the CV error of the current best solution could be away from best possi-
ble CV error in the entire range of the regularization parameters. Our numerical
experiments demonstrate that a theoretically guaranteed choice of a regularization
parameter in the above sense is possible with reasonable computational costs.
1 Introduction
Many machine learning tasks involve careful tuning of a regularization parameter that controls the
balance between an empirical loss term and a regularization term. A regularization parameter is
usually selected by comparing the cross-validation (CV) errors at several different regularization
parameters. Although its choice has a significant impact on the generalization performances, the
current practice is still more of an art than a science. For example, in commonly used grid-search, it
is hard to tell how many grid points we should search over for obtaining sufficiently small CV error.
In this paper we introduce a novel framework for a class of regularized binary classification problems
that can compute a regularization path of CV error lower bounds. For an ε ∈ [0, 1], we define ε-
approximate regularization parameters to be a set of regularization parameters such that the CV
error of the solution at the regularization parameter is guaranteed to be no greater by ε than the best
possible CV error in the entire range of regularization parameters. Given a set of solutions obtained,
for example, by grid-search, the proposed framework allows us to provide a theoretical guarantee
of the current best solution by explicitly quantifying its approximation level ε in the above sense.
Furthermore, when a desired approximation level ε is specified, the proposed framework can be used
for efficiently finding one of the ε-approximate regularization parameters.
The proposed framework is built on a novel CV error lower bound represented as a function of the
regularization parameter, and this is why we call it as a regularization path of CV error lower bounds.
Our CV error lower bound can be computed by only using a finite number of solutions obtained by
arbitrary algorithms. It is thus easy to apply our framework to common regularization parameter tun-
ing strategies such as grid-search or Bayesian optimization. Furthermore, the proposed framework
can be used not only with exact optimal solutions but also with sufficiently good approximate solu-
1
Figure 1: An illustration of the proposed framework. One of our
algorithms presented in §4 automatically selected 39 regulariza-
tion parameter values in [10−3, 103], and an upper bound of the
validation error for each of them is obtained by solving an op-
timization problem approximately. Among those 39 values, the
one with the smallest validation error upper bound (indicated as
⋆ at C = 1.368) is guaranteed to be ε(= 0.1) approximate reg-
ularization parameter in the sense that the validation error for
the regularization parameter is no greater by ε than the smallest
possible validation error in the whole interval [10−3, 103]. See
§5 for the setup (see also Figure 3 for the results with other op-
tions).
tions, which is computationally advantageous because completely solving an optimization problem
is often much more costly than obtaining a reasonably good approximate solution.
Our main contribution in this paper is to show that a theoretically guaranteed choice of a regular-
ization parameter in the above sense is possible with reasonable computational costs. To the best
of our knowledge, there is no other existing methods for providing such a theoretical guarantee on
CV error that can be used as generally as ours. Figure 1 illustrates the behavior of the algorithm for
obtaining ε = 0.1 approximate regularization parameter (see §5 for the setup).
Related works Optimal regularization parameter can be found if its exact regularization path can
be computed. Exact regularization path has been intensively studied [1, 2], but they are known to be
numerically unstable and do not scale well. Furthermore, exact regularization path can be computed
only for a limited class of problems whose solutions are written as piecewise-linear functions of the
regularization parameter [3]. Our framework is much more efficient and can be applied to wider
classes of problems whose exact regularization path cannot be computed. This work was motivated
by recent studies on approximate regularization path [4, 5, 6, 7]. These approximate regularization
paths have a property that the objective function value at each regularization parameter value is no
greater by ε than the optimal objective function value in the entire range of regularization param-
eters. Although these algorithms are much more stable and efficient than exact ones, for the task
of tuning a regularization parameter, our interest is not in objective function values but in CV er-
rors. Our approach is more suitable for regularization parameter tuning tasks in the sense that the
approximation quality is guaranteed in terms of CV error.
As illustrated in Figure 1, we only compute a finite number of solutions, but still provide approxima-
tion guarantee in the whole interval of the regularization parameter. To ensure such a property, we
need a novel CV error lower bound that is sufficiently tight and represented as a monotonic function
of the regularization parameter. Although several CV error bounds (mostly for leave-one-out CV) of
SVM and other similar learning frameworks exist (e.g., [8, 9, 10, 11]), none of them satisfy the above
required properties. The idea of our CV error bound is inspired from recent studies on safe screening
[12, 13, 14, 15, 16] (see Appendix A for the detail). Furthermore, we emphasize that our contribu-
tion is not in presenting a new generalization error bound, but in introducing a practical framework
for providing a theoretical guarantee on the choice of a regularization parameter. Although gener-
alization error bounds such as structural risk minimization [17] might be used for a rough tuning of
a regularization parameter, they are known to be too loose to use as an alternative to CV (see, e.g.,
§11 in [18]). We also note that our contribution is not in presenting new method for regularization
parameter tuning such as Bayesian optimization [19], random search [20] and gradient-based search
[21]. As we demonstrate in experiments, our approach can provide a theoretical approximation
guarantee of the regularization parameter selected by these existing methods.
2 Problem Setup
We consider linear binary classification problems. Let {(xi, yi) ∈ Rd×{−1, 1}}i∈[n] be the training
set where n is the size of the training set, d is the input dimension, and [n] := {1, . . . , n}. An inde-
pendent held-out validation set with size n′ is denoted similarly as {(x′i, y′i) ∈ Rd × {−1, 1}}i∈[n′].
A linear decision function is written as f(x) = w⊤x, where w ∈ Rd is a vector of coefficients,
and ⊤ represents the transpose. We assume the availability of a held-out validation set only for sim-
plifying the exposition. All the proposed methods presented in this paper can be straightforwardly
2
adapted to a cross-validation setup. Furthermore, the proposed methods can be kernelized if the loss
function satisfies a certain condition. In this paper we focus on the following class of regularized
convex loss minimization problems:
w∗C := arg min
w∈Rd
1
2
∥w∥2 + C
∑
i∈[n]
ℓ(yi, w
⊤xi), (1)
where C > 0 is the regularization parameter, and ∥ · ∥ is the Euclidean norm. The loss function is
denoted as ℓ : {−1, 1}× R → R. We assume that ℓ(·, ·) is convex and subdifferentiable in the 2nd
argument. Examples of such loss functions include logistic loss, hinge loss, Huber-hinge loss, etc.
For notational convenience, we denote the individual loss as ℓi(w) := ℓ(yi, w⊤xi) for all i ∈ [n].
The optimal solution for the regularization parameter C is explicitly denoted as w∗C . We assume that
the regularization parameter is defined in a finite interval [Cℓ, Cu], e.g., Cℓ = 10−3 and Cu = 103
as we did in the experiments.
For a solution w ∈ Rd, the validation error1 is defined as
Ev(w) :=
1
n′
∑
i∈[n′]
I(y′iw
⊤x′i < 0), (2)
where I(·) is the indicator function. In this paper, we consider two problem setups. The first prob-
lem setup is, given a set of (either optimal or approximate) solutions w∗C1 , . . . , w
∗
CT
at T different
regularization parameters C1, . . . , CT ∈ [Cℓ, Cu], to compute the approximation level ε such that
min
Ct∈{C1,...,CT }
Ev(w
∗
Ct)− E
∗
v ≤ ε, where E∗v := min
C∈[Cl,Cu]
Ev(w
∗
C), (3)
by which we can find how accurate our search (grid-search, typically) is in a sense of the deviation
of the achieved validation error from the true minimum in the range, i.e., E∗v . The second problem
setup is, given the approximation level ε, to find an ε-approximate regularization parameter within
an interval C ∈ [Cl, Cu], which is defined as an element of the following set
C(ε) :=
{
C ∈ [Cl, Cu]
∣∣∣ Ev(w∗C)− E∗v ≤ ε
}
.
Our goal in this second setup is to derive an efficient exploration procedure which achieves the
specified validation approximation level ε. These two problem setups are both common scenarios in
practical data analysis, and can be solved by using our proposed framework for computing a path of
validation error lower bounds.
3 Validation error lower bounds as a function of regularization parameter
In this section, we derive a validation error lower bound which is represented as a function of the
regularization parameter C. Our basic idea is to compute a lower and an upper bound of the inner
product score w∗⊤C x
′
i for each validation input x′i, i ∈ [n′], as a function of the regularization param-
eter C. For computing the bounds of w∗⊤C x
′
i, we use a solution (either optimal or approximate) for
a different regularization parameter C̃ ̸= C.
3.1 Score bounds
We first describe how to obtain a lower and an upper bound of inner product score w∗⊤C x
′
i based on
an approximate solution ŵC̃ at a different regularization parameter C̃ ̸= C.
Lemma 1. Let ŵC̃ be an approximate solution of the problem (1) for a regularization parameter
value C̃ and ξi(ŵC) be a subgradient of ℓi at w = ŵC such that a subgradient of the objective
function is
g(ŵC̃) := ŵC + C̃
∑
i∈[n]
ξi(ŵC). (4)
1 For simplicity, we regard a validation instance whose score is exactly zero, i.e., w⊤x′i = 0, is correctly
classified in (2). Hereafter, we assume that there are no validation instances whose input vector is completely
0, i.e., x′i = 0, because those instances are always correctly classified according to the definition in (2).
3
Then, for any C > 0, the score w∗⊤C x
′
i, i ∈ [n′], satisfies
w∗⊤C x
′
i≥LB(w∗⊤C x′i|ŵC̃) :=
{
α(ŵC̃ , x
′
i)− 1C̃ (β(ŵC̃ , x
′
i) + γ(g(ŵC̃), x
′
i))C, if C > C̃,
−β(ŵC̃ , x′i) +
1
C̃
(α(ŵC̃ , x
′
i) + δ(g(ŵC̃), x
′
i))C, if C < C̃,
(5a)
w∗⊤C x
′
i≤UB(w∗⊤C x′i|ŵC̃) :=
{
−β(ŵC̃ , x′i) +
1
C̃
(α(ŵC̃ , x
′
i) + δ(g(ŵC̃), x
′
i))C, if C > C̃,
α(ŵC̃ , x
′
i)− 1C̃ (β(ŵC̃ , x
′
i) + γ(g(ŵC̃), x
′
i))C, if C < C̃,
(5b)
where
α(w∗
C̃
, x′i) :=
1
2
(∥w∗
C̃
∥∥x′i∥+ w∗⊤C̃ x
′
i) ≥ 0, γ(g(ŵC̃), x
′
i) :=
1
2
(∥g(ŵC̃)∥∥x
′
i∥+ g(ŵC̃)
⊤x′i) ≥ 0,
β(w∗
C̃
, x′i) :=
1
2
(∥w∗
C̃
∥∥x′i∥ − w∗⊤C̃ x
′
i) ≥ 0, δ(g(ŵC̃), x
′
i) :=
1
2
(∥g(ŵC̃)∥∥x
′
i∥ − g(wC̃)
⊤x′i) ≥ 0.
The proof is presented in Appendix A. Lemma 1 tells that we have a lower and an upper bound of the
score w∗⊤C x
′
i for each validation instance that linearly change with the regularization parameter C.
When ŵC̃ is optimal, it can be shown that (see Proposition B.24 in [22]) there exists a subgradient
such that g(ŵC̃) = 0, meaning that the bounds are tight because γ(g(ŵC̃), x
′
i) = δ(g(ŵC̃), x
′
i) = 0.
Corollary 2. When C = C̃, the score w∗⊤
C̃
x′i, i ∈ [n′], for the regularization parameter value C̃
itself satisfies
w∗⊤
C̃
x′i≥LB(w∗⊤C̃ x
′
i|ŵC̃)= ŵ
⊤
C̃
x′i−γ(g(ŵC̃), x
′
i), w
∗⊤
C̃
x′i≤UB(w∗⊤C̃ x
′
i|ŵC̃)= ŵ
⊤
C̃
x′i+δ(g(ŵC̃), x
′
i).
The results in Corollary 2 are obtained by simply substituting C = C̃ into (5a) and (5b).
3.2 Validation Error Bounds
Given a lower and an upper bound of the score of each validation instance, a lower bound of the
validation error can be computed by simply using the following facts:
y′i = +1 and UB(w
∗⊤
C x
′
i|ŵC̃) < 0 ⇒ mis-classified, (6a)
y′i = −1 and LB(w∗⊤C x′i|ŵC̃) > 0 ⇒ mis-classified. (6b)
Furthermore, since the bounds in Lemma 1 linearly change with the regularization parameter C, we
can identify the interval of C within which the validation instance is guaranteed to be mis-classified.
Lemma 3. For a validation instance with y′i = +1, if
C̃ < C <
β(ŵC̃ , x
′
i)
α(ŵC̃ , x
′
i) + δ(g(ŵC̃), x
′
i)
C̃ or
α(ŵC̃ , x
′
i)
β(ŵC̃ , x
′
i) + γ(g(ŵC̃), x
′
i)
C̃ < C < C̃,
then the validation instance (x′i, y′i) is mis-classified. Similarly, for a validation instance with y′i =
−1, if
C̃ < C <
α(ŵC̃ , x
′
i)
β(ŵC̃ , x
′
i) + γ(g(ŵC̃), x
′
i)
C̃ or
β(ŵC̃ , x
′
i)
α(ŵC̃ , x
′
i) + δ(g(ŵC̃), x
′
i)
C̃ < C < C̃,
then the validation instance (x′i, y′i) is mis-classified.
This lemma can be easily shown by applying (5) to (6).
As a direct consequence of Lemma 3, the lower bound of the validation error is represented as a
function of the regularization parameter C in the following form.
Theorem 4. Using an approximate solution ŵC̃ for a regularization parameter C̃, the validation
error Ev(w∗C) for any C > 0 satisfies
Ev(w
∗
C) ≥ LB(Ev(w∗C)|ŵC̃) := (7)
1
n′
(
∑
y′i=+1
I
(
C̃<C<
β(ŵC̃ , x
′
i)
α(ŵC̃ , x
′
i)+δ(g(ŵC̃), x
′
i)
C̃
)
+
∑
y′i=+1
I
(
α(ŵC̃ , x
′
i)
β(ŵC̃ , x
′
i)+γ(g(ŵC̃), x
′
i)
C̃<C<C̃
)
+
∑
y′i=−1
I
(
C̃<C<
α(ŵC̃ , x
′
i)
β(ŵC̃ , x
′
i)+γ(g(ŵC̃), x
′
i)
C̃
)
+
∑
y′i=−1
I
(
β(ŵC̃ , x
′
i)
α(ŵC̃ , x
′
i)+δ(g(ŵC̃), x
′
i)
C̃<C<C̃
))
.
4
Algorithm 1: Computing the approximation level ε from the given set of solutions
Input: {(xi, yi)}i∈[n], {(x′i, y′i)}i∈[n′], Cl, Cu, W := {wC̃1 , . . . , wC̃T }
1: Ebestv ← minC̃t∈{C̃1,...,C̃T } UB(Ev(w
∗
C̃t
)|wC̃t)
2: LB(E∗v ) ← minc∈[Cl,Cu]
{
maxC̃t∈{C̃1,...,C̃T } LB(Ev(w
∗
c )|wC̃t)
}
Output: ε = Ebestv − LB(E∗v )
The lower bound (7) is a staircase function of the regularization parameter C.
Remark 5. We note that our validation error lower bound is inspired from recent studies on safe
screening [12, 13, 14, 15, 16], which identifies sparsity of the optimal solutions before solving the
optimization problem. A key technique used in those studies is to bound Lagrange multipliers at the
optimal, and we utilize this technique to prove Lemma 1, which is a core of our framework.
By setting C = C̃, we can obtain a lower and an upper bound of the validation error for the regu-
larization parameter C̃ itself, which are used in the algorithm as a stopping criteria for obtaining an
approximate solution ŵC̃ .
Corollary 6. Given an approximate solution ŵC̃ , the validation error Ev(w∗C̃) satisfies
Ev(w
∗
C̃
) ≥ LB(Ev(w∗C̃)|ŵC̃)
=
1
n′
(
∑
y′i=+1
I
(
ŵ⊤
C̃
x′i + δ(g(ŵC̃), x
′
i) < 0
)
+
∑
y′i=−1
I
(
ŵ⊤
C̃
x′i − γ(g(ŵC̃), x
′
i) > 0
)
)
, (8a)
Ev(w
∗
C̃
) ≤ UB(Ev(w∗C̃)|ŵC̃)
= 1− 1
n′
(
∑
y′i=+1
I
(
ŵ⊤
C̃
x′i − γ(g(ŵC̃), x
′
i) ≥ 0
)
+
∑
y′i=−1
I
(
ŵ⊤
C̃
x′i + δ(g(ŵC̃), x
′
i) ≤ 0
)
)
. (8b)
4 Algorithm
In this section we present two algorithms for each of the two problems discussed in §2. Due to the
space limitation, we roughly describe the most fundamental forms of these algorithms. Details and
several extensions of the algorithms are presented in supplementary appendices B and C.
4.1 Problem setup 1: Computing the approximation level ε from a given set of solutions
Given a set of (either optimal or approximate) solutions ŵC̃1 , . . . , ŵC̃T , obtained e.g., by ordinary
grid-search, our first problem is to provide a theoretical approximation level ε in the sense of (3)2.
This problem can be solved easily by using the validation error lower bounds developed in §3.2. The
algorithm is presented in Algorithm 1, where we compute the current best validation error Ebestv in
line 1, and a lower bound of the best possible validation error E∗v := minC∈[Cℓ,Cu] Ev(w
∗
C) in line
2. Then, the approximation level ε can be simply obtained by subtracting the latter from the former.
We note that LB(E∗v ), the lower bound of E∗v , can be easily computed by using T evaluation error
lower bounds LB(Ev(w∗C)|wC̃t), t = 1, . . . , T , because they are staircase functions of C.
4.2 Problem setup 2: Finding an ε-approximate regularization parameter
Given a desired approximation level ε such as ε = 0.01, our second problem is to find an ε-
approximate regularization parameter. To this end we develop an algorithm that produces a set of
optimal or approximate solutions ŵC̃1 , . . . , ŵC̃T such that, if we apply Algorithm 1 to this sequence,
then approximation level would be smaller than or equal to ε. Algorithm 2 is the pseudo-code of
this algorithm. It computes approximate solutions for an increasing sequence of regularization pa-
rameters in the main loop (lines 2-11).
2 When we only have approximate solutions ŵC̃1 , . . . , ŵC̃T , Eq. (3) is slightly incorrect. The first term of
the l.h.s. of (3) should be minC̃t∈{C̃1,...,C̃T } UB(Ev(ŵC̃t)|ŵC̃t).
5
Algorithm 2: Finding an ε approximate regular-
ization parameter with approximate solutions
Input: {(xi, yi)}i∈[n], {(x′i, y′i)}i∈[n′], Cl, Cu, ε
1: t ← 1, C̃t ← Cl, Cbest ← Cl, Ebestv ← 1
2: while C̃t ≤ Cu do
3: ŵC̃t←solve (1) approximately for C=C̃t
4: Compute UB(Ev(w∗C̃t)|ŵC̃t) by (8b).
5: if UB(Ev(w∗C̃t)|ŵC̃t) < E
best
v then
6: Ebestv ← UB(Ev(w∗C̃t)|ŵC̃t)
7: Cbest ← C̃t
8: end if
9: Set C̃t+1 by (10)
10: t ← t+ 1
11: end while
Output: Cbest ∈ C(ε).
Let us now consider tth iteration in the main
loop, where we have already computed t−1 ap-
proximate solutions ŵC̃1 , . . . , ŵC̃t−1 for C̃1 <
. . . < C̃t−1. At this point,
Cbest := arg min
C̃τ∈{C̃1,...,C̃t−1}
UB(Ev(w
∗
C̃τ
)|ŵC̃τ ),
is the best (in worst-case) regularization param-
eter obtained so far and it is guaranteed to be an
ε-approximate regularization parameter in the
interval [Cl,C̃t] in the sense that the validation
error,
Ebestv := min
C̃τ∈{C̃1,...,C̃t−1}
UB(Ev(w
∗
C̃τ
)|ŵC̃τ ),
is shown to be at most greater by ε than the
smallest possible validation error in the inter-
val [Cl, C̃t]. However, we are not sure whether
Cbest can still keep ε-approximation property
for C > C̃t. Thus, in line 3, we approx-
imately solve the optimization problem (1) at C = C̃t and obtain an approximate solution
ŵC̃t . Note that the approximate solution ŵC̃t must be sufficiently good enough in the sense that
UB(Ev(w∗C̃τ
)|ŵC̃τ )− LB(Ev(w
∗
C̃τ
)|ŵC̃τ ) is sufficiently smaller than ε (typically 0.1ε). If the up-
per bound of the validation error UB(Ev(w∗C̃τ )|ŵC̃τ ) is smaller than E
best
v , we update Ebestv and
Cbest (lines 5-8).
Our next task is to find C̃t+1 in such a way that Cbest is an ε-approximate regularization parameter
in the interval [Cl, C̃t+1]. Using the validation error lower bound in Theorem 4, the task is to find
the smallest C̃t+1 > C̃t that violates
Ebestv − LB(Ev(w∗C)|ŵC̃t) ≤ ε, ∀C ∈ [C̃t, Cu], (9)
In order to formulate such a C̃t+1, let us define
P := {i ∈ [n′]|y′i = +1, UB(w∗⊤C̃t x
′
i|ŵC̃t) < 0},N := {i ∈ [n
′]|y′i = −1, LB(w∗⊤C̃t x
′
i|ŵC̃t) > 0}.
Furthermore, let
Γ :=
{ β(ŵC̃t , x
′
i)
α(ŵC̃t , x
′
i) + δ(g(ŵC̃t), x
′
i)
C̃t
}
i∈P
∪
{ α(ŵC̃t , x
′
i)
β(ŵC̃t , x
′
i) + γ(g(ŵC̃t), x
′
i)
C̃t
}
i∈N
,
and denote the kth-smallest element of Γ as kth(Γ) for any natural number k. Then, the smallest
C̃t+1 > C̃t that violates (9) is given as
C̃t+1←(⌊n′(LB(Ev(w∗C̃t)|ŵC̃t)−E
best
v +ε)⌋+1)th(Γ). (10)
5 Experiments
In this section we present experiments for illustrating the proposed methods. Table 2 summarizes
the datasets used in the experiments. They are taken from libsvm dataset repository [23]. All the
input features except D9 and D10 were standardized to [−1, 1]3. For illustrative results, the in-
stances were randomly divided into a training and a validation sets in roughly equal sizes. For
quantitative results, we used 10-fold CV. We used Huber hinge loss (e.g., [24]) which is convex
and subdifferentiable with respect to the second argument. The proposed methods are free from
the choice of optimization solvers. In the experiments, we used an optimization solver described in
[25], which is also implemented in well-known liblinear software [26]. Our slightly modified code
3 We use D9 and D10 as they are for exploiting sparsity.
6
liver-disorders (D2) ionosphere (D3) australian (D4)
Figure 2: Illustrations of Algorithm 1 on three benchmark datasets (D2, D3, D4). The plots indicate
how the approximation level ε improves as the number of solutions T increases in grid-search (red),
Bayesian optimization (blue) and our own method (green, see the main text).
(a) ε = 0.1 without tricks (b) ε = 0.05 without tricks (c) ε = 0.05 with tricks 1 and 2
Figure 3: Illustrations of Algorithm 2 on ionosphere (D3) dataset for (a) op2 with ε = 0.10, (b)
op2 with ε = 0.05 and (c) op3 with ε = 0.05, respectively. Figure 1 also shows the result for op3
with ε = 0.10.
(for adaptation to Huber hinge loss) is provided as a supplementary material, and is also available
on https://github.com/takeuchi-lab/RPCVELB. Whenever possible, we used warm-
start approach, i.e., when we trained a new solution, we used the closest solutions trained so far
(either approximate or optimal ones) as the initial starting point of the optimizer. All the compu-
tations were conducted by using a single core of an HP workstation Z800 (Xeon(R) CPU X5675
(3.07GHz), 48GB MEM). In all the experiments, we set Cℓ = 10−3 and Cu = 103.
Results on problem 1 We applied Algorithm 1 in §4 to a set of solutions obtained by 1) grid-
search, 2) Bayesian optimization (BO) with expected improvement acquisition function, and 3)
adaptive search with our framework which sequentially computes a solution whose validation lower
bound is smallest based on the information obtained so far. Figure 2 illustrates the results on three
datasets, where we see how the approximation level ε in the vertical axis changes as the number of
solutions (T in our notation) increases. In grid-search, as we increase the grid points, the approxi-
mation level ε tends to be improved. Since BO tends to focus on a small region of the regularization
parameter, it was difficult to tightly bound the approximation level. We see that the adaptive search,
using our framework straightforwardly, seems to offer slight improvement from grid-search.
Results on problem 2 We applied Algorithm 2 to benchmark datasets for demonstrating theo-
retically guaranteed choice of a regularization parameter is possible with reasonable computational
costs. Besides the algorithm presented in §4, we also tested a variant described in supplementary
Appendix B. Specifically, we have three algorithm options. In the first option (op1), we used op-
timal solutions {w∗
C̃t
}t∈[T ] for computing CV error lower bounds. In the second option (op2),
we instead used approximate solutions {ŵC̃t}t∈[T ]. In the last option (op3), we additionally used
speed-up tricks described in supplementary Appendix B. We considered four different choices of
ε ∈ {0.1, 0.05, 0.01, 0}. Note that ε = 0 indicates the task of finding the exactly optimal regular-
7
Table 1: Computational costs. For each of the three options and ε ∈ {0.10, 0.05, 0.01, 0}, the
number of optimization problems solved (denoted as T ) and the total computational costs (denoted
as time) are listed. Note that, for op2, there are no results for ε = 0.
op1 op2 op3 op1 op2 op3
(using w∗
C̃
) (using ŵC̃ ) (using tricks) (using w
∗
C̃
) (using ŵC̃ ) (using tricks)
ε T
time
T
time
T
time
T
time
T
time
T
time
(sec) (sec) (sec) (sec) (sec) (sec)
0.10
D1
30 0.068 32 0.031 33 0.041
D6
92 1.916 93 0.975 62 0.628
0.05 68 0.124 70 0.061 57 0.057 207 4.099 209 2.065 123 1.136
0.01 234 0.428 324 0.194 205 0.157 1042 16.31 1069 9.686 728 5.362
0 442 0.697 N.A. 383 0.629 4276 57.57 N.A. 2840 44.68
0.10
D2
221 0.177 223 0.124 131 0.084
D7
289 8.492 293 5.278 167 3.319
0.05 534 0.385 540 0.290 367 0.218 601 16.18 605 9.806 379 6.604
0.01 1503 0.916 2183 0.825 1239 0.623 2532 57.79 2788 35.21 1735 24.04
0 10939 6.387 N.A. 6275 3.805 67490 1135 N.A. 42135 760.8
0.10
D3
61 0.617 62 0.266 43 0.277
D8
72 0.761 74 0.604 66 0.606
0.05 123 1.073 129 0.468 73 0.359 192 1.687 195 1.162 110 0.926
0.01 600 4.776 778 0.716 270 0.940 1063 8.257 1065 6.238 614 4.043
0 5412 26.39 N.A. 815 6.344 34920 218.4 N.A. 15218 99.57
0.10
D4
27 0.169 27 0.088 23 0.093
D9
134 360.2 136 201.0 89 74.37
0.05 64 0.342 65 0.173 47 0.153 317 569.9 323 280.7 200 128.5
0.01 167 0.786 181 0.418 156 0.399 1791 2901 1822 1345 1164 657.4
0 342 1.317 N.A. 345 1.205 85427 106937 N.A. 63300 98631
0.10
D5
62 0.236 63 0.108 45 0.091
D10
Ev < 0.10 Ev < 0.10 Ev < 0.10
0.05 108 0.417 109 0.171 77 0.137 Ev < 0.05 Ev < 0.05 Ev < 0.05
0.01 421 1.201 440 0.631 258 0.401 157 81.75 162 31.02 114 36.81
0 2330 4.540 N.A. 968 2.451 258552 85610 N.A. 42040 23316
ization parameter. In some datasets, the smallest validation errors are less than 0.1 or 0.05, in which
cases we do not report the results (indicated as “Ev < 0.05” etc.). In trick1, we initially computed
solutions at four different regularization parameter values evenly allocated in [10−3, 103] in the log-
arithmic scale. In trick2, the next regularization parameter C̃t+1 was set by replacing ε in (10) with
1.5ε (see supplementary Appendix B). For the purpose of illustration, we plot examples of valida-
tion error curves in several setups. Figure 3 shows the validation error curves of ionosphere (D3)
dataset for several options and ε.
Table 1 shows the number of optimization problems solved in the algorithm (denoted as T ), and
the total computation time in CV setups. The computational costs mostly depend on T , which gets
smaller as ε increases. Two tricks in supplementary Appendix B was effective in most cases for
reducing T . In addition, we see the advantage of using approximate solutions by comparing the
computation times of op1 and op2 (though this strategy is only for ε ̸= 0). Overall, the results
suggest that the proposed algorithm allows us to find theoretically guaranteed approximate regular-
ization parameters with reasonable costs except for ε = 0 cases. For example, the algorithm found
an ε = 0.01 approximate regularization parameter within a minute in 10-fold CV for a dataset with
more than 50000 instances (see the results on D10 for ε = 0.01 with op2 and op3 in Table 1).
Table 2: Benchmark datasets used in the experiments.
dataset name sample size input dimension dataset name sample size input dimension
D1 heart 270 13 D6 german.numer 1000 24
D2 liver-disorders 345 6 D7 svmguide3 1284 21
D3 ionosphere 351 34 D8 svmguide1 7089 4
D4 australian 690 14 D9 a1a 32561 123
D5 diabetes 768 8 D10 w8a 64700 300
6 Conclusions and future works
We presented a novel algorithmic framework for computing CV error lower bounds as a function
of the regularization parameter. The proposed framework can be used for a theoretically guaranteed
choice of a regularization parameter. Additional advantage of this framework is that we only need to
compute a set of sufficiently good approximate solutions for obtaining such a theoretical guarantee,
which is computationally advantageous. As demonstrated in the experiments, our algorithm is prac-
tical in the sense that the computational cost is reasonable as long as the approximation quality ε is
not too close to 0. An important future work is to extend the approach to multiple hyper-parameters
tuning setups.
8
References
[1] B. Efron, T. Hastie, I. Johnstone, and R. TIbshirani. Least angle regression. Annals of Statistics,
32(2):407–499, 2004.
[2] T. Hastie, S. Rosset, R. Tibshirani, and J. Zhu. The entire regularization path for the support vector
machine. Journal of Machine Learning Research, 5:1391–1415, 2004.
[3] S. Rosset and J. Zhu. Piecewise linear regularized solution paths. Annals of Statistics, 35:1012–1030,
2007.
[4] J. Giesen, J. Mueller, S. Laue, and S. Swiercy. Approximating Concavely Parameterized Optimization
Problems. In Advances in Neural Information Processing Systems, 2012.
[5] J. Giesen, M. Jaggi, and S. Laue. Approximating Parameterized Convex Optimization Problems. ACM
Transactions on Algorithms, 9, 2012.
[6] J. Giesen, S. Laue, and Wieschollek P. Robust and Efficient Kernel Hyperparameter Paths with Guaran-
tees. In International Conference on Machine Learning, 2014.
[7] J. Mairal and B. Yu. Complexity analysis of the Lasso reguralization path. In International Conference
on Machine Learning, 2012.
[8] V. Vapnik and O. Chapelle. Bounds on Error Expectation for Support Vector Machines. Neural Compu-
tation, 12:2013–2036, 2000.
[9] T. Joachims. Estimating the generalization performance of a SVM efficiently. In International Conference
on Machine Learning, 2000.
[10] K. Chung, W. Kao, C. Sun, L. Wang, and C. Lin. Radius margin bounds for support vector machines with
the RBF kernel. Neural computation, 2003.
[11] M. Lee, S. Keerthi, C. Ong, and D. DeCoste. An efficient method for computing leave-one-out error in
support vector machines with Gaussian kernels. IEEE Transactions on Neural Networks, 15:750–7, 2004.
[12] L. El Ghaoui, V. Viallon, and T. Rabbani. Safe feature elimination in sparse supervised learning. Pacific
Journal of Optimization, 2012.
[13] Z. Xiang, H. Xu, and P. Ramadge. Learning sparse representations of high dimensional data on large
scale dictionaries. In Advances in Neural Information Processing Sysrtems, 2011.
[14] K. Ogawa, Y. Suzuki, and I. Takeuchi. Safe screening of non-support vectors in pathwise SVM computa-
tion. In International Conference on Machine Learning, 2013.
[15] J. Liu, Z. Zhao, J. Wang, and J. Ye. Safe Screening with Variational Inequalities and Its Application to
Lasso. In International Conference on Machine Learning, volume 32, 2014.
[16] J. Wang, J. Zhou, J. Liu, P. Wonka, and J. Ye. A Safe Screening Rule for Sparse Logistic Regression. In
Advances in Neural Information Processing Sysrtems, 2014.
[17] V. Vapnik. The Nature of Statistical Learning Theory. Springer, 1996.
[18] S. Shalev-Shwartz and S. Ben-David. Understanding machine learning. Cambridge University Press,
2014.
[19] J. Snoek, H. Larochelle, and R. Adams. Practical Bayesian Optimization of Machine Learning Algo-
rithms. In Advances in Neural Information Processing Sysrtems, 2012.
[20] J. Bergstra and Y. Bengio. Random Search for Hyper-Parameter Optimization. Journal of Machine
Learning Research, 13:281–305, 2012.
[21] O. Chapelle, V. Vapnik, O. Bousquet, and S. Mukherjee. Choosing multiple parameters for support vector
machines. Machine Learning, 46:131–159, 2002.
[22] P D. Bertsekas. Nonlinear Programming. Athena Scientific, 1999.
[23] C. Chang and C. Lin. LIBSVM : A Library for Support Vector Machines. ACM Transactions on Intelligent
Systems and Technology, 2:1–39, 2011.
[24] O. Chapelle. Training a support vector machine in the primal. Neural computation, 19:1155–1178, 2007.
[25] C. Lin, R. Weng, and S. Keerthi. Trust Region Newton Method for Large-Scale Logistic Regression. The
Journal of Machine Learning Research, 9:627–650, 2008.
[26] R. Fan, K. Chang, and C. Hsieh. LIBLINEAR: A library for large linear classification. The Journal of
Machine Learning, 9:1871–1874, 2008.
9
